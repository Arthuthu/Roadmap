@page "/administration"
@inject IUserService userService;
@inject IRoadmapService roadmapService;
@inject IRoadmapVotingService votingService;
@inject IComentarioService comentarioService;
@inject IDenunciaService denunciaService;
@inject NavigationManager navManager;

@if (IsInitialized)
{
	<div class="administration-buttons-div">
		<div class="text-center">
			<button @onclick="ToggleShowDenuncias" class="second-style-button">
				Denuncias
			</button>
		</div>

		<div class="text-center">
			<button @onclick="ToggleShowRoadmapsToApprove" class="second-style-button">
				Roadmaps
			</button>
		</div>
	</div>

	if (showDenuncias)
	{
		<Virtualize Items="@Denuncias" Context="denuncia" OverscanCount="50">
			<div class="text-center">
				<div class="denuncia-type">
					@denuncia.Type
				</div>
				<div>
					@denuncia.Description
				</div>
				<div>
					@denuncia.CreatedDate
				</div>
				@if (denuncia.Type == "Roadmap")
				{
					<div>
						<a href="/roadmapdetails/@denuncia.RoadmapId">
							Roadmap
						</a>
					</div>
				}
				else if (denuncia.Type == "User")
				{
					<div>
						<a href="/profile/@denuncia.UserId">
							Usuario
						</a>
					</div>
				}
				else if (denuncia.Type == "Comment")
				{
					<div>
						@denuncia.CommentId
					</div>
				}
			</div>
		</Virtualize>
	}

	if (showRoadmapsToApprove)
	{
		@if (Roadmaps is not null)
		{
			<Virtualize Items="@Roadmaps" Context="roadmap" OverscanCount="50">
				<div class="roadmap-div">
					<a class="roadmap-name-label" href="roadmapdetails/@roadmap.Id">
						<p class="roadmap-name-background">@roadmap.Name</p>
					</a>

					<div class="roadmap-description">
						<p>@roadmap.Description</p>
					</div>

					<div>
						<div class="display-flex">
							<div class="roadmap-category-label">
								<p>Categoria:</p>
							</div>
							<div class="roadmap-category">
								@roadmap.Category
							</div>
						</div>
					</div>

					<div class="roadmap-date-author-div">
						<div class="display-flex">
							<div class="roadmap-created-label">
								<p>Criado:</p>
							</div>
							<div>
								@roadmap.CreatedDate
							</div>
						</div>

						<div class="roadmap-author-div">
							<div class="roadmap-author-label">
								<p>Autor: </p>
							</div>
							<a class="roadmap-author" href="profile/@roadmap.AuthorId">
								@roadmap.Author
							</a>
						</div>
					</div>
				</div>

				<div class="approve-buttons-div">
					<button class="first-style-button"
				@onclick="async () => await ApproveRoadmap(roadmap)">
						Aprovar
					</button>

					<button @onclick="ToggleShowDeletePage" class="first-style-button">
						Excluir
					</button>
				</div>

				@if (showDeletePage)
				{
					<AdminDeleteRoadmapConfirmation RoadmapId="@roadmap.Id.ToString()" />
				}
			</Virtualize>
		}
		else
		{
			<div class="text-center">
				Não há nada aqui
			</div>
		}
	}

}

@code {
	private Guid? LoggedInUserId;
	private IList<RoadmapClassModel>? Roadmaps;
	private IList<ComentarioModel>? Comentarios;
	private IList<DenunciaModel>? Denuncias;
	private UserModel? LoggedInUserModel;
	private ComentarioModel? Comentario;
	private bool IsInitialized = false;
	private bool showDeletePage = false;
	private bool showRoadmapsToApprove = false;
	private bool showDenuncias = false;

	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/notfound");
		}

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		if (LoggedInUserModel is null)
		{
			navManager.NavigateTo("/notfound");
		}

		if (LoggedInUserModel!.IsAdmin != "1")
		{
			navManager.NavigateTo("/notfound");
		}

		await GetAllRoadmaps();

		IsInitialized = true;
	}

	private async Task GetAllRoadmaps()
	{
		var roadmaps = await roadmapService.GetAllRoadmaps();

		if (roadmaps is not null)
		{
			Roadmaps = roadmaps.Where(x => x.IsApproved == "0").ToList();

			var users = await userService.GetAllUsers();

			foreach (var roadmap in Roadmaps!)
			{
				foreach (var user in users)
				{
					if (roadmap.UserId == user.Id)
					{
						roadmap.Author = user.Username;
						roadmap.AuthorId = user.Id.ToString();
					}
				}
			}
		}
	}

	private async Task ApproveRoadmap(RoadmapClassModel roadmap)
	{
		roadmap.IsApproved = "1";

		await roadmapService.UpdateRoadmap(roadmap);
		await GetAllRoadmaps();
	}

	private async Task ToggleShowRoadmapsToApprove()
	{
		showRoadmapsToApprove = !showRoadmapsToApprove;
		await GetAllRoadmaps();
	}

	private void ToggleShowDeletePage()
	{
		showDeletePage = !showDeletePage;
	}

	private async Task ToggleShowDenuncias()
	{
		showDenuncias = !showDenuncias;
		Denuncias = await denunciaService.GetAllDenuncias();
	}
}