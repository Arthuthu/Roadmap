@page "/administration"
@inject IRoadmapVotingService votingService;
@inject IUserService userService;
@inject IRoadmapService roadmapService;
@inject NavigationManager navManager;

@if (IsInitialized)
{
	@if (Roadmaps is not null)
	{
		foreach (var roadmap in Roadmaps)
		{
			<div class="roadmap-box-div">
				<a class="roadmap-name-a" href="roadmapdetails/@roadmap.Id">
					<p class="roadmap-name">@roadmap.Name</p>
				</a>

				<div class="roadmap-description-div">
					<p>@roadmap.Description</p>
				</div>

				<div class="roadmap-category-main-div">
					<div class="roadmap-category-div">
						<div class="roadmap-category-label">
							<p>Categoria:</p>
						</div>
						<div class="roadmap-category-value">
							@roadmap.Category
						</div>
					</div>
				</div>

				<div class="roadmap-created-author-div">
					<div class="roadmad-created-div">
						<div class="roadmap-created-label">
							<p>Criado:</p>
						</div>
						<div class="roadmap-category-value">
							@roadmap.CreatedDate
						</div>
					</div>

					<div class="roadmap-author-div">
						<div class="roadmap-author-label">
							<p>Autor: </p>
						</div>
						<a class="roadmap-author-value" href="profile/@roadmap.AuthorId">
							@roadmap.Author
						</a>
					</div>
				</div>
			</div>
			<div class="roadmap-approval-yes-delete-div">
				<button class="first-style-button" 
				@onclick="async () => await ApproveRoadmap(roadmap)">
					Aprovar
				</button>
				<a href="admindeleteroadmapconfirmation/@roadmap.Id" class="first-style-button"
				id="roadmap-approval-delete-button">
					Deletar
				</a>
			</div>
		}
	}
	else
	{
		<div class="text-center">
			Não há nada aqui
		</div>
	}
}

@code {
	private IList<RoadmapClassModel>? Roadmaps;
	private Guid? LoggedInUserId;
	private UserModel? LoggedInUserModel;
	private bool IsInitialized = false;

	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/notfound");
		}

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		if (LoggedInUserModel.IsAdmin == "0")
		{
			navManager.NavigateTo("/notfound");
		}

		await GetAllRoadmaps();

		IsInitialized = true;
	}

	private async Task GetAllRoadmaps()
	{
		var roadmaps = await roadmapService.GetAllRoadmaps();

		if (roadmaps is not null)
		{
			Roadmaps = roadmaps.Where(x => x.IsApproved == "0").ToList();

			var users = await userService.GetAllUsers();

			foreach (var roadmap in Roadmaps!)
			{
				foreach (var user in users)
				{
					if (roadmap.UserId == user.Id)
					{
						roadmap.Author = user.Username;
						roadmap.AuthorId = user.Id.ToString();
					}
				}
			}
		}
	}

	private async Task ApproveRoadmap(RoadmapClassModel roadmap)
	{
		roadmap.IsApproved = "1";

		await roadmapService.UpdateRoadmap(roadmap);
		await GetAllRoadmaps();
	}
}