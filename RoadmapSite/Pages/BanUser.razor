@page "/banuser/{userid}"
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject IComentarioService comentarioService
@inject IAuthenticationService authService


@if (IsInitialized)
{
    <div class="text-center my-4 h4">
        Tem certeza que deseja banir este usuario?
    </div>

    <div class="text-center">
        <button @onclick=ToggleBanConfirmation class="second-style-button">
            Sim
        </button>
    </div>

    @if (showBanConfirmation)
    {
        <div class="text-center">
            <button @onclick="BanTheUser" class="second-style-button">
                Confirmar
            </button>
        </div>
    }
}

@code {
    [Parameter]
    public string? UserId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private UserModel? AdministratorModel { get; set; }
    private UserModel? UserThatWillBeBanned { get; set; }
    private bool IsInitialized = false;
    private bool showBanConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        await PageVerification();
    }

    private async Task PageVerification()
    {
        if (UserId is null)
        {
            navManager.NavigateTo("/notfound");
        }

        LoggedInUserId = await userService.GetLoggedInUserId();

        if (LoggedInUserId == Guid.Empty)
        {
            navManager.NavigateTo("/notfound");
        }

        AdministratorModel = await userService.GetUserById(LoggedInUserId);

        if (AdministratorModel is null)
        {
            navManager.NavigateTo("/notfound");
        }

        if (AdministratorModel!.IsAdmin is null)
        {
            navManager.NavigateTo("/notfound");
        }

        UserThatWillBeBanned = await userService.GetUserById(new Guid(UserId!));

        if (UserThatWillBeBanned is null)
        {
            navManager.NavigateTo("/notfound");
        }

        IsInitialized = true;
    }

    private async Task BanTheUser()
    {
        UserThatWillBeBanned!.IsBanned = "1";
        UserThatWillBeBanned!.Bio = "...";

        await userService.UpdateUser(UserThatWillBeBanned);
        await roadmapService.DeleteAllUserRoadmaps(new Guid(UserId!));
        await comentarioService.DeleteAllUserComentarios(new Guid(UserId!));

        navManager.NavigateTo("/administration");
    }

    private void ToggleBanConfirmation()
    {
        showBanConfirmation = !showBanConfirmation;
    }
}