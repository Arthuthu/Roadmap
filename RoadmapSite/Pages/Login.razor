@page "/login"
@inject IAuthenticationService authService
@inject NavigationManager navManager

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="">
	<div class="form-div">
		<div class="iniciar-sessao-paragraph">
			<p>Iniciar sessão</p>
		</div>

		<div class="first-form-label">
			<label for="username" class="visually-hidden">Usuario</label>
			<div>
				<InputText id="username" class="form-input-text" @bind-Value="model.Username" placeholder="Usuario" />
			</div>
		</div>

		<div class="other-form-label">
			<label for="password" class="visually-hidden">Senha</label>
			<div>
				<InputText type="password" id="password" class="form-input-text" @bind-Value="model.Password" placeholder="Senha" />
			</div>
		</div>

		<div class="text-center">
			<button type="submit" class="first-style-button">Entrar</button>
		</div>
	</div>

	<div class="registre-se-aqui-div">
		<div class="registre-se-aqui-div-p">
			<p>Não possui uma conta?</p>
		</div>
		<div>
			<a class="first-style-button" href="register">Registre-se aqui</a>
		</div> 
	</div>

	@if (showAuthenticationError)
	{
		<div role="alert" class="alert-message-div">
			<p class="alert-message">@authenticationErrorText</p>
		</div>
	}
</EditForm>

@code {
	private AuthenticationUserModel model = new();

	private bool showAuthenticationError = false;
	private string authenticationErrorText = "";

	private async Task ExecuteLogin()
	{
		showAuthenticationError = false;

		var result = await authService.Login(model);

		if (result is not null)
		{
			navManager.NavigateTo("/");
		}
		else
		{
			authenticationErrorText = "Usuario ou senha incorretos";
			showAuthenticationError = true;
		}
	}
}
