@inject NavigationManager navManager
@inject IUserService userService
@inject IDenunciaService denunciaService

@if (isInitialized)
{
	<EditForm Model="Denuncia" OnValidSubmit="ExecuteDenunciaCreation" Context="Form">
		<div class="text-center">
			<div class="criar-denuncia-label">
				<p>Criar Denuncia</p>
			</div>

			<div>
				<label for="name" class="visually-hidden">Descrição</label>
				<div>
					<InputTextArea id="description" @bind-Value="Denuncia.Description"
			  placeholder="Descreve a denuncia" class="denuncia-input-text-area" />
				</div>
			</div>

			<div class="text-center">
				<button type="submit" class="first-style-button">Enviar Denuncia</button>
			</div>
		</div>
	</EditForm>
}

@code {
	[Parameter]
	public string? Id { get; set; }
	[Parameter]
	public string? Type { get; set; }
	private Guid LoggedInUserId { get; set; }
	private UserModel? UserDenunciado { get; set; }
	private UserModel? LoggedInUserModel { get; set; }
	private DenunciaModel Denuncia = new();
	private bool isInitialized = false;

	protected override async Task OnInitializedAsync()
	{
		await PageVerification();
	}

	private async Task PageVerification()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/login");

			return;
		}

		if (Type is null || Id is null)
		{
			navManager.NavigateTo("/notfound");

			return;
		}

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		if (LoggedInUserModel is null)
		{
			navManager.NavigateTo("/notfound");

			return;
		}

		if (LoggedInUserModel!.IsConfirmed is false)
		{
			navManager.NavigateTo("/emailnotconfirmed");

			return;
		}

		if (LoggedInUserModel!.IsBanned is true)
		{
			navManager.NavigateTo("/banned");

			return;
		}

		if (Type == "User")
		{
			await GetUsernameById();
		}

		isInitialized = true;

		return;
	}

	private async Task GetUsernameById()
	{
		UserDenunciado = await userService.GetUserById(new Guid(Id!));
	}

	private async Task ExecuteDenunciaCreation()
	{
		Denuncia.Type = Type;

		if (Type == "Roadmap")
		{
			Denuncia.AuthorId = LoggedInUserId;
			Denuncia.RoadmapId = new Guid(Id!);
			await denunciaService.CreateDenuncia(Denuncia);
			navManager.NavigateTo($"/roadmapdetails/{Denuncia.RoadmapId}", true);
		}

		if (Type == "User")
		{
			Denuncia.AuthorId = LoggedInUserId;
			Denuncia.Username = UserDenunciado!.Username;
			await denunciaService.CreateDenuncia(Denuncia);
			navManager.NavigateTo($"/profile/{Denuncia.Username}", true);
		}

		if (Type == "Comment")
		{
			Denuncia.AuthorId = LoggedInUserId;
			Denuncia.CommentId = new Guid(Id!);
			await denunciaService.CreateDenuncia(Denuncia);
			navManager.NavigateTo("/");
		}
	}
}
