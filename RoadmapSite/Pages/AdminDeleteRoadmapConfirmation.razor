@page "/admindeleteroadmapconfirmation/{roadmapid}"
@inject IRoadmapService roadmapService
@inject IUserService userService
@inject IVotingService votingService
@inject NavigationManager navManager

@if (IsInitialized)
{
    <div class="roadmap-delet-confirmation-name-div">
        @Roadmap.Name
    </div>
    <div class="roadmap-delet-confirmation-description-parent-div">
        <div class="roadmap-delet-confirmation-descriptions">
            @Roadmap.Description
        </div>
        <div class="roamap-delet-category-created-parent-div">
            <div class="roadmap-delet-confirmation-descriptions">
                Categoria: @Roadmap.Category
            </div>
            <div class="roadmap-delet-confirmation-descriptions">
                Criado: @Roadmap.CreatedDate
            </div>
        </div>
    </div>


    <div class="text-center">
        <div class="delete-roadmap-confirmation-label">
            <p>Tem certeza que deseja deletar esse roadmap?</p>
        </div>
        <div class="delete-roadmap-confirmation-buttons-div">
            <button class="first-style-button"
                @onclick="async () => await DeleteRoadmap(new Guid(RoadmapId))">
                Sim
            </button>

            <a class="first-style-button" href="/adminroadmapapproval">
                Não
            </a>
        </div>
    </div>
}


@code {
    [Parameter]
    public string RoadmapId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private RoadmapClassModel? Roadmap { get; set; }
    private UserModel LoggedInUserModel;
    private bool IsInitialized = false;


    protected override async Task OnInitializedAsync()
    {
        LoggedInUserId = await votingService.GetLoggedInUserId();

        if (LoggedInUserId == Guid.Empty)
        {
            navManager.NavigateTo("/notfound");
        }

        LoggedInUserModel = await GetLoggedInUserModel();

        if (LoggedInUserModel.IsAdmin == "0")
        {
            navManager.NavigateTo("/notfound");
        }

        Roadmap = await GetRoadmapById();

        IsInitialized = true;
    }

    private async Task<UserModel> GetLoggedInUserModel()
    {
        var loggedInUserModel = await userService.GetUserById(LoggedInUserId);

        return loggedInUserModel;
    }

    private async Task<RoadmapClassModel> GetRoadmapById()
    {
        var roadmap = await roadmapService.GetRoadmapById(new Guid(RoadmapId));

        return roadmap;
    }

    private async Task DeleteRoadmap(Guid roadmapId)
    {
        await roadmapService.DeleteRoadmap(roadmapId);

        navManager.NavigateTo("/adminroadmapapproval");
    }
}