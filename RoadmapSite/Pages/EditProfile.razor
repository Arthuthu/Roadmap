@page "/editprofile/{userid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService

@if (IsInitialized)
{
	<AuthorizeView>
		<Authorized>
			<div class="edit-profile-bio-label">
				Escreva algo em sua bio
			</div>
			<EditForm Model="User" OnValidSubmit="UpdateProfile" class="" Context="ProfileForm">
				<div class="first-form-label">
					<label for="bio" class="visually-hidden">Usuario</label>
					<div>
						<InputTextArea id="bio" class="form-input-text-description" @bind-Value="User.Bio" placeholder="Bio (Maximo 1000 caracteres)" />
					</div>
				</div>

				<div class="button-div">
					<button type="submit" class="first-style-button">Salvar</button>
				</div>
			</EditForm>

			@if (showAuthenticationError)
			{
				<div role="alert" class="alert-message-div">
					<p class="alert-message">@authenticationErrorText</p>
				</div>
			}
		</Authorized>
		<NotAuthorized>
			<div class="not-authorized-message-div">
				<div class="not-authorized-message-p-div">
					<p class="not-authorized-message">Você não esta autorizado para ver esta pagina, entre em uma conta primeiro</p>
				</div>
				<div>
					<a class="first-style-button" href="login">
						Entrar
					</a>
				</div>
			</div>
		</NotAuthorized>
	</AuthorizeView>
}



@code {
	[Parameter]
	public string? UserId { get; set; }
	public string? LoggedInUserId { get; set; }
	public UserModel? User { get; set; }
	private bool IsInitialized { get; set; }
	private bool showAuthenticationError = false;
	private string authenticationErrorText = "";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await GetLoggedInUserId();
		}
		catch
		{
			navManager.NavigateTo("/notfound");
		}

		await GetUserByPageId(UserId!);

		if (UserId != LoggedInUserId)
		{
			navManager.NavigateTo("/notfound");
		}

		IsInitialized = true;
	}

	private async Task GetLoggedInUserId()
	{
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		if (userId is null)
		{
			LoggedInUserId = "";
			throw new Exception("Usuario nao esta logado");
		}

		LoggedInUserId = userId;
	}

	private async Task GetUserByPageId(string userId)
	{
		User = await userService.GetUserById(new Guid(userId));
	}

	private async Task UpdateProfile()
	{
		var result = await userService.UpdateUser(User!);

		if (result is not null)
		{
			authenticationErrorText = "Perfil atualizado com sucesso";
			showAuthenticationError = true;
			navManager.NavigateTo($"/profile/{UserId}");
		}
		else
		{
			authenticationErrorText = "Não foi possivel atualizar o perfil";
			showAuthenticationError = true;
		}
	}

	//private async Task<UserModel> UpdateModel(UserModel user)
	//{
	//	user.Id = User.Id;
	//	user.Username = User.Username;

	//	return user;
	//}
}
