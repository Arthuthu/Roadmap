@page "/editprofile/{userid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService

@if (IsInitialized)
{
	<AuthorizeView>
		<Authorized>
			Você pode editar seu perfil
		</Authorized>
		<NotAuthorized>
			<div class="not-authorized-message-div">
				<div class="not-authorized-message-p-div">
					<p class="not-authorized-message">Você não esta autorizado para ver esta pagina, entre em uma conta primeiro</p>
				</div>
				<div>
					<a class="first-style-button" href="login">
						Entrar
					</a>
				</div>
			</div>
		</NotAuthorized>
	</AuthorizeView>
}



@code {
	[Parameter]
	public string? UserId { get; set; }
	public string? LoggedInUserId { get; set; }
	public UserModel User { get; set; }
	private bool IsInitialized { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await GetLoggedInUserId();
		}
		catch
		{
			navManager.NavigateTo("/notfound");
		}

		await GetUserByPageId(UserId);

		if (UserId != LoggedInUserId)
		{
			navManager.NavigateTo("/notfound");
		}

		IsInitialized = true;
	}

	private async Task GetLoggedInUserId()
	{
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		if (userId is null)
		{
			LoggedInUserId = "";
			throw new Exception("Usuario nao esta logado");
		}

		LoggedInUserId = userId;
	}

	private async Task GetUserByPageId(string userId)
	{
		User = await userService.GetUserById(new Guid(userId));
	}
}
