@page "/profile/{userid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService

<AuthorizeView>
	<Authorized>
		<h1>User Profile</h1>

		<p>User ID: @UserId</p>
		<p>Username: @User.Username</p>

		@if (UserId == LoggedInUserId)
		{
			<p>You can only see this if this is your profile</p>
		}
	</Authorized>
	<NotAuthorized>
		<div class="not-authorized-message-div">
			<div class="not-authorized-message-p-div">
				<p class="not-authorized-message">Você não esta autorizado para ver esta pagina, entre em uma conta primeiro</p>
			</div>
			<div>
				<a class="first-style-button" href="login">
					Entrar
				</a>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>


@code {
	[Parameter]
	public string? UserId { get; set; }
	public string? LoggedInUserId { get; set; }
	public UserModel User { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await GetLoggedInUserId();
		await GetUserByPageId(UserId);
	}

	private async Task GetLoggedInUserId()
	{
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		if (userId is null)
		{
			LoggedInUserId = "";
			throw new Exception("Usuario nao esta logado");
		}

		LoggedInUserId = userId;
	}

	private async Task GetUserByPageId(string userId)
	{
		User = await userService.GetUserById(new Guid(userId));
	}
}
