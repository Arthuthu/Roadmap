@page "/profile/{userid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapVotesService roadmapVotesService
@inject IRoadmapService roadmapService
@inject IVotingService votingService

<AuthorizeView>
	<Authorized>
		<div class="user-profile-photo-div">
			<img src="@DefaultProfilePicture" />
		</div>

		<div class="user-profile-div">
			<div class="user-profile-username-bio-div">
				<div class="user-profile-username">
					@User!.Username
				</div>
				<div class="user-profile-bio">
					@if (User.Bio is null)
					{
						<p>
							Não conhecemos @User.Username muito bem, mas temos certeza que é gente boa.
						</p>
					}

					@User.Bio
				</div>
			</div>
		</div>

		@if (UserId == LoggedInUserId.ToString())
		{
			<div class="edit-profile-button-div">
				<a class="first-style-button" href="/editprofile/@User.Id">
					Editar Perfil
				</a>
			</div>
		}

		@if (User.IsAdmin == "1")
		{
			<div class="profile-approve-roadmaps-div">
				<a class="first-style-button" href="/adminroadmapapproval">Aprovar Roadmaps</a>
			</div>
		}

		<div class="profile-user-roadmaps-label-div">
			<p>@User.Username Roadmaps</p>
		</div>

		@if (Roadmaps is null)
		{
			<div class="profile-no-roadmap-label">
				@User.Username não criou nenhum roadmap ainda.
			</div>
		}
		else
		{
			<div class="roadmap-box-div-profile-parent-div">
				@foreach (var roadmap in Roadmaps)
				{
					<div class="roadmap-second-div">
						<div onclick="toggleVoteButtonClass(this.querySelector('button'))">
							<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
							@onclick="async () => await votingService.AddUserVote(roadmap.Id, LoggedInUserId)">
								<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
								<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
								Vote
							</button>
						</div>
						<div class="roadmap-box-div">
							<a class="roadmap-name-a" href="roadmapdetails/@roadmap.Id">
								<p class="roadmap-name">@roadmap.Name</p>
							</a>

							<div class="roadmap-description-div">
								<p>@roadmap.Description</p>
							</div>

							<div class="roadmap-category-author-main-div">
								<div class="roadmap-category-div">
									<div class="roadmap-category-label">
										<p>Categoria:</p>
									</div>
									<div class="roadmap-category-value">
										@roadmap.Category
									</div>
								</div>
							</div>
							<div class="roadmap-created-author-div">
								<div class="roadmad-created-div">
									<div class="roadmap-created-label">
										<p>Criado:</p>
									</div>
									<div class="roadmap-category-value">
										@roadmap.CreatedDate
									</div>
								</div>

								<div class="roadmap-author-div">
									<div class="roadmap-author-label">
										<p> </p>
									</div>
									<a class="roadmap-author-value" href="profile/@roadmap.AuthorId">
										@roadmap.Author
									</a>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</Authorized>
	<NotAuthorized>
		<div class="not-authorized-message-div">
			<div class="not-authorized-message-p-div">
				<p class="not-authorized-message">Você não esta autorizado para ver esta pagina, entre em uma conta primeiro</p>
			</div>
			<div>
				<a class="first-style-button" href="login">
					Entrar
				</a>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {
	[Parameter]
	public string? UserId { get; set; }
	public Guid? LoggedInUserId { get; set; }
	public UserModel? User { get; set; }
	public IList<RoadmapClassModel>? Roadmaps { get; set; }
	const string DefaultProfilePicture = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png"; 

	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await votingService.GetLoggedInUserId();

		if (LoggedInUserId is null)
		{
			navManager.NavigateTo("/login");
		}

		await GetUserByPageId(UserId!);
		await GetRoadmapsByUserId(new Guid(UserId!));
	}

	protected override async Task OnParametersSetAsync()
	{
		LoggedInUserId = await votingService.GetLoggedInUserId();

		if (LoggedInUserId is null)
		{
			navManager.NavigateTo("/login");
		}

		await GetUserByPageId(UserId!);
		await GetRoadmapsByUserId(new Guid(UserId!));

		foreach (var roadmap in Roadmaps!)
		{
			string roadmapClass = await votingService.GetButtonColor(roadmap.Id, LoggedInUserId);
			roadmap.RoadmapHtmlClass = roadmapClass;

			int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);
			roadmap.RoadmapTotalVotes = roadmapTotalVotes;
		}
	}

	private async Task GetUserByPageId(string userId)
	{
		User = await userService.GetUserById(new Guid(userId));
	}

	private async Task GetRoadmapsByUserId(Guid userId)
	{
		var roadmaps = await roadmapService.GetRoadmapByUserId(userId);

		Roadmaps = roadmaps;
	}


}
