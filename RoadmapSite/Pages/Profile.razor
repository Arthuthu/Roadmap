@page "/profile/{userid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject IRoadmapVotesService roadmapVotesService
@inject IRoadmapVotingService votingService

@if (isInitialized)
{
	<div class="user-profile-photo-div">
		<img src="@DefaultProfilePicture" />
	</div>

	<div class="user-information-div">
		<div class="username-bio-div">
			<div class="username-div">
				@User!.Username
			</div>
			<div class="bio-div">
				@if (User.Bio is null)
				{
					<p>
						Não conhecemos @User.Username muito bem, mas temos certeza que é gente boa.
					</p>
				}

				@User.Bio
			</div>
		</div>
	</div>

	if (User!.IsBanned is true)
	{
		<div class="text-center text-danger my-4 h4 ">
			Este usuário foi banido
		</div>
	}


	<div class="text-center">
		<button @onclick="ToggleShowProfileOptions" class="second-style-button">
			Opções
		</button>
	</div>

	if (showProfileOptions)
	{
		@if (UserId == LoggedInUserId.ToString())
		{
			<div class="text-center m-4">
				<a class="second-style-button" href="/editprofile/@User.Id">
					Editar Perfil
				</a>
			</div>
		}

		@if (User.IsAdmin is true)
		{
			<div class="text-center m-4">
				<a class="second-style-button" href="/administration">Administrar</a>
			</div>
		}

		@if (LoggedInUserModel!.IsAdmin is true && User!.IsBanned is false)
		{
			<div class="text-center">
				<button class="second-style-button" @onclick=ToggleShowBanConfirmation>
					Banir
				</button>
			</div>

			if (showBanConfirmation)
			{
				<div class="text-center m-4">
					<BanUser UserId="@UserId" />
				</div>
			}

		}

		@if (LoggedInUserModel!.IsAdmin is true && User!.IsBanned is true)
		{
			<div class="text-center">
				<button class="second-style-button" @onclick=ToggleShowUnbanConfirmation>
					Desbanir
				</button>
			</div>

			if (showUnbanConfirmation)
			{
				<div class="text-center m-4">
					<UnbanUser UserId="@UserId" />
				</div>
			}
		}

		<div class="text-center m-4">
			<a class="second-style-button" href="/createdenuncia/User/@UserId">
				Denunciar
			</a>
		</div>
	}

	<div class="user-roadmaps-label">
		<p>@User.Username Roadmaps</p>
	</div>

	@if (Roadmaps is null)
	{
		<div class="no-roadmap-label">
			@User.Username não criou nenhum roadmap ainda.
		</div>
	}
	else
	{
		<Virtualize Items="@Roadmaps" Context="roadmap" OverscanCount="50">
			<div class="display-flex">
				<div onclick="toggleVoteButtonClass(this.querySelector('button'))">
					<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
					@onclick="async () => await AddUserVote(roadmap.Id)">
						<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
						<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
						Vote
					</button>
				</div>
				<div class="roadmap-div">
					<a class="roadmap-name-label" href="roadmapdetails/@roadmap.Id">
						<p class="roadmap-name-background">@roadmap.Name</p>
					</a>

					<div class="roadmap-description">
						<p>@roadmap.Description</p>
					</div>

					<div>
						<div class="display-flex">
							<div class="roadmap-category-label">
								<p>Categoria:</p>
							</div>
							<div class="roadmap-category">
								@roadmap.Category
							</div>
						</div>
					</div>

					<div class="roadmap-date-author-div">
						<div class="display-flex">
							<div class="roadmap-created-label">
								<p>Criado:</p>
							</div>
							<div>
								@roadmap.CreatedDate
							</div>
						</div>
					</div>
				</div>
			</div>
		</Virtualize>
	}
}

@code {
	[Parameter]
	public string? UserId { get; set; }
	public Guid? LoggedInUserId { get; set; }
	public IList<RoadmapClassModel>? Roadmaps { get; set; }
	private UserModel? User { get; set; }
	private UserModel? LoggedInUserModel { get; set; }
	private bool showProfileOptions = false;
	private bool showBanConfirmation = false;
	private bool showUnbanConfirmation = false;
	private bool isInitialized = false;
	const string DefaultProfilePicture = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png"; 

	protected override async Task OnInitializedAsync()
	{
		await PageVerification();
	}

	protected override async Task OnParametersSetAsync()
	{
		await PageVerification();
	}

	private async Task<bool> PageVerification()
	{
		if (UserId is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/login");

			return false;
		}

		User = await userService.GetUserById(new Guid(UserId!));

		if (User is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		if (LoggedInUserModel is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		if (LoggedInUserModel.IsConfirmed is false)
		{
			navManager.NavigateTo("/emailnotconfirmed");

			return false;
		}

		if (LoggedInUserModel.IsBanned is true)
		{
			navManager.NavigateTo("/banned");

			return false;
		}

		Roadmaps = await roadmapService.GetRoadmapByUserId(new Guid(UserId!));

		await GetRoadmapsData();

		isInitialized = true;

		return true;
	}

	private async Task AddUserVote(Guid roadmapId)
	{
		await votingService.AddUserVote(roadmapId, LoggedInUserId);

		await OnInitializedAsync();
	}

	private async Task GetRoadmapsData()
	{
		foreach (var roadmap in Roadmaps!)
		{
			string roadmapClass = await votingService.GetButtonColor(roadmap.Id, LoggedInUserId);
			roadmap.RoadmapHtmlClass = roadmapClass;

			int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);
			roadmap.RoadmapTotalVotes = roadmapTotalVotes;
		}
	}

	private void ToggleShowProfileOptions()
	{
		showProfileOptions = !showProfileOptions;
	}

	private void ToggleShowBanConfirmation()
	{
		showBanConfirmation = !showBanConfirmation;
	}

	private void ToggleShowUnbanConfirmation()
	{
		showUnbanConfirmation = !showUnbanConfirmation;
	}
}
