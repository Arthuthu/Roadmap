@page "/profile/{userid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapVotesService roadmapVotesService
@inject IRoadmapService roadmapService

<AuthorizeView>
	<Authorized>
		<div class="user-profile-photo-div">
			<img src="@DefaultProfilePicture" />
		</div>

		<div class="user-profile-div">
			<div class="user-profile-username-bio-div">
				<div class="user-profile-username">
					@User.Username
				</div>
				<div class="user-profile-bio">
					@if(User.Bio is null)
					{
						<p>
							Não conhecemos @User.Username muito bem, mas temos certeza que é gente boa.
						</p>
					}

					@User.Bio
				</div>
			</div>
		</div>

		@if (UserId == LoggedInUserId)
		{
			<div class="edit-profile-button-div">
				<a class="first-style-button" href="/editprofile/@User.Id">
					Editar Perfil
				</a>
			</div>
		}

		<div class="profile-user-roadmaps-label-div">
			<p>@User.Username Roadmaps</p>
		</div>

		<div class="roadmap-box-div-profile-parent-div">
			@foreach (var roadmap in Roadmaps)
			{
				<div class="roadmap-second-div">
					<div onclick="toggleVoteButtonClass(this.querySelector('button'))">
						<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
							@onclick="async () => await AddUserVote(roadmap.Id)">
							<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
							<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
							Vote
						</button>
					</div>
					<div class="roadmap-box-div">
						<a class="roadmap-name-a" href="roadmapdetails/@roadmap.Id">
							<p class="roadmap-name">@roadmap.Name</p>
						</a>

						<div class="roadmap-description-div">
							<p>@roadmap.Description</p>
						</div>

						<div class="roadmap-category-author-main-div">
							<div class="roadmap-category-div">
								<div class="roadmap-category-label">
									<p>Categoria:</p>
								</div>
								<div class="roadmap-category-value">
									@roadmap.Category
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>

	</Authorized>
	<NotAuthorized>
		<div class="not-authorized-message-div">
			<div class="not-authorized-message-p-div">
				<p class="not-authorized-message">Você não esta autorizado para ver esta pagina, entre em uma conta primeiro</p>
			</div>
			<div>
				<a class="first-style-button" href="login">
					Entrar
				</a>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {
	[Parameter]
	public string? UserId { get; set; }
	public string? LoggedInUserId { get; set; }
	public UserModel User { get; set; }
	public IList<RoadmapClassModel>? Roadmaps { get; set; }
	const string DefaultProfilePicture = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png"; 

	protected override async Task OnInitializedAsync()
	{
		await GetLoggedInUserId();
		await GetUserByPageId(UserId);
		await GetRoadmapsByUserId(new Guid(UserId));
	}

	protected override async Task OnParametersSetAsync()
	{
		await GetLoggedInUserId();
		await GetUserByPageId(UserId!);
		await GetRoadmapsByUserId(new Guid(UserId!));

		foreach (var roadmap in Roadmaps!)
		{
			string roadmapClass = await GetButtonColor(roadmap.Id);
			roadmap.RoadmapHtmlClass = roadmapClass;

			int roadmapTotalVotes = await GetRoadmapVotes(roadmap.Id);
			roadmap.RoadmapTotalVotes = roadmapTotalVotes;
		}
	}

	private async Task GetLoggedInUserId()
	{
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		if (userId is null)
		{
			LoggedInUserId = "";
			throw new Exception("Usuario nao esta logado");
		}

		LoggedInUserId = userId;
	}

	private async Task GetUserByPageId(string userId)
	{
		User = await userService.GetUserById(new Guid(userId));
	}

	private async Task GetRoadmapsByUserId(Guid userId)
	{
		var roadmaps = await roadmapService.GetRoadmapByUserId(userId);

		Roadmaps = roadmaps;
	}

	private async Task AddUserVote(Guid roadmapId)
	{
		RoadmapVotesModel roadmapVote = new();
		roadmapVote.UserId = new Guid(LoggedInUserId);
		roadmapVote.RoadmapId = new Guid(roadmapId.ToString());

		if (roadmapVote.UserId is null)
		{
			throw new Exception("Você precisa entrar em uma conta para votar");
			navManager.NavigateTo("/login");
		}

		var didUserVotedOnRoadmap = await VerifiyIfUserVotedOnRoadmap(roadmapId);

		if (didUserVotedOnRoadmap is true)
		{
			var votedRoadmapId = await GetRoadmapVoteIdByUserAndRoadmapId(roadmapVote.RoadmapId);
			await roadmapVotesService.RemoveRoadmapVote(votedRoadmapId);
		}
		else
		{
			await roadmapVotesService.AddRoadmapVote(roadmapVote);
		}
	}

	private async Task<IList<RoadmapVotesModel>> GetAllRoadmapsUserVoted(Guid id)
	{
		var roadmaps = await roadmapVotesService.GetAllRoadmapsUserVoted(id);

		return roadmaps;
	}



	private async Task<bool> VerifiyIfUserVotedOnRoadmap(Guid roadmapId)
	{
		var roadmaps = await GetAllRoadmapsUserVoted(new Guid(LoggedInUserId));

		foreach (var roadmap in roadmaps)
		{
			if (roadmap.RoadmapId == roadmapId)
			{
				return true;
			}
		}

		return false;
	}

	private async Task<Guid> GetRoadmapVoteIdByUserAndRoadmapId(Guid roadmapId)
	{
		var userId = new Guid(LoggedInUserId);

		var roadmapVote = await roadmapVotesService.GetRoadmapVoteIdByUserAndRoadmapId(userId, roadmapId);
		var voteId = roadmapVote.Id;

		return voteId;
	}

	private async Task<string> GetButtonColor(Guid roadmapId)
	{
		var result = await VerifiyIfUserVotedOnRoadmap(roadmapId);

		if (result is true)
		{
			return "vote-button-voted";
		}

		return "vote-button";
	}

	private async Task<int> GetRoadmapVotes(Guid roadmapId)
	{
		var roadmapVotes = await roadmapVotesService.GetRoadmapVotesByRoadmapId(roadmapId);

		return roadmapVotes.Count();
	}
}
