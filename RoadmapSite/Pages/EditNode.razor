@page "/editnode/{nodeid}"
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject INodeService nodeService

@if (IsInitialized)
{
    <div class="text-center h4 fw-bold">
        <div class="my-4">
            @Node!.Name
        </div>
        <div class="my-4">
            @Node.Description
        </div>
    </div>
    <div class="text-center">
        <div>
            <div>
                <button class="second-style-button" @onclick=ToggleShowDeleteConfirmation>
                    Excluir Node
                </button>
            </div>
            @if (showDeleteConfirmation)
            {
                <div>
                    <button class="second-style-button" @onclick=DeleteNode>
                        Confirmar
                    </button>
                </div>
            }
        </div>
        <div>
            <button class="second-style-button" @onclick=ToggleShowNodeEditing>
                Editar Node
            </button>

            @if (showNodeEditing)
            {
                <EditForm Model="Node" OnValidSubmit="UpdateNode">
                    <div>
                        <div class="my-2 fw-bold h4">
                            Nome
                        </div>
                        <div>
                            <InputText id="nome" class="form-input-text" @bind-Value="Node.Name"
                                 placeholder="@Node.Name" />
                        </div>
                    </div>
                    <div>
                        <div class="my-2 fw-bold h4">
                            Descrição
                        </div>
                        <div>
                            <InputTextArea id="description" class="form-input-text" @bind-Value="Node.Description"
                                placeholder="@Node.Description" />
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="first-style-button">Salvar</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string? NodeId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private UserModel? LoggedInUserModel { get; set; }
    private RoadmapClassModel? Roadmap { get; set; }
    private NodeModel? Node { get; set; }
    private bool IsInitialized = false;
    private bool showDeleteConfirmation = false;
    private bool showNodeEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await PageVerification();
    }

    private async Task PageVerification()
    {
        if (NodeId is null)
        {
            navManager.NavigateTo("/notfound");
        }

        LoggedInUserId = await userService.GetLoggedInUserId();

        LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

        if (LoggedInUserModel.IsBanned == "1")
        {
            navManager.NavigateTo("/banned");
        }

        Node = await nodeService.GetNodeById(new Guid(NodeId!));

        if (Node is null)
        {
            navManager.NavigateTo("/notfound");
        }

        Roadmap = await roadmapService.GetRoadmapById(Node!.RoadmapId);

        if (Roadmap is null)
        {
            navManager.NavigateTo("/notfound");
        }

        if (Roadmap!.UserId != LoggedInUserId)
        {
            navManager.NavigateTo("/notfound");
        }

        IsInitialized = true;
    }

    private async Task DeleteNode()
    {
        await nodeService.DeleteNode(new Guid(NodeId!));

        navManager.NavigateTo($"/roadmapdetails/{Node!.RoadmapId}");
    }

    private async Task UpdateNode()
    {
        await nodeService.UpdateNode(Node!);

        await OnInitializedAsync();
    }

    private void ToggleShowDeleteConfirmation()
    {
        showDeleteConfirmation = !showDeleteConfirmation;
    }

    private void ToggleShowNodeEditing()
    {
        showNodeEditing = !showNodeEditing;
    }
}
