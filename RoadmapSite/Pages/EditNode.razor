@page "/editnode/{nodeid}"
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject INodeService nodeService

@if (IsInitialized)
{
    <div>
        @Node!.Name
        @Node.Description
    </div>
    <div>
        <button>
            Excluir Node
        </button>
        <button>
            Editar Node
        </button>
    </div>
}

@code {
    [Parameter]
    public string? NodeId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private UserModel? LoggedInUserModel { get; set; }
    private RoadmapClassModel? Roadmap { get; set; }
    private NodeModel? Node { get; set; }
    private bool IsInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await PageVerification();
    }

    private async Task PageVerification()
    {
        if (NodeId is null)
        {
            navManager.NavigateTo("/notfound");
        }

        LoggedInUserId = await userService.GetLoggedInUserId();

        LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

        if (LoggedInUserModel.IsBanned == "1")
        {
            navManager.NavigateTo("/banned");
        }

        Node = await nodeService.GetNodeById(new Guid(NodeId!));

        if (Node is null)
        {
            navManager.NavigateTo("/notfound");
        }

        Roadmap = await roadmapService.GetRoadmapById(Node!.RoadmapId);

        if (Roadmap is null)
        {
            navManager.NavigateTo("/notfound");
        }

        if (Roadmap!.UserId != LoggedInUserId)
        {
            navManager.NavigateTo("/notfound");
        }

        IsInitialized = true;
    }
}
