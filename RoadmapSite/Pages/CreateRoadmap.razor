@page "/createroadmap"
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapServiceService


@if (isInitialized)
{
	<EditForm Model="Roadmap" OnValidSubmit="ExecuteRoadmapCreation" Context="Form">
		<div class="form-div">
			<div class="form-label-div">
				<p>Criar roadmap</p>
			</div>

			<div class="first-input-text-div">
				<label for="name" class="visually-hidden">Nome</label>
				<div>
					<InputText id="name" class="form-input-text" @bind-Value="Roadmap.Name" placeholder="Nome do Roadmap" />
				</div>
			</div>

			<div class="input-text-div">
				<label for="description" class="visually-hidden">Descrição</label>
				<div>
					<InputTextArea id="description" class="form-input-text-description" @bind-Value="Roadmap.Description" placeholder="Descrição (Maximo 500 caracteres)" />
				</div>
			</div>

			<div class="input-text-div">
				<label for="category" class="visually-hidden">Categoria</label>
				<div>
					<InputText id="category" class="form-input-text" @bind-Value="Roadmap.Category" placeholder="Categoria" />
				</div>
			</div>

			<div class="text-center">
				<button type="submit" class="first-style-button">Criar Roadmap</button>
			</div>
		</div>
	</EditForm>
	 
	<div role="alert" class="alert-message-div">
		<p class="alert-message">@roadmapCreationMessage</p>
	</div>
}

@code {
	private Guid LoggedInUserId { get; set; }
	private UserModel? LoggedInUserModel { get; set; }
	private RoadmapClassModel Roadmap = new();
	private string roadmapCreationMessage = "";
	private bool isInitialized = false;

	protected override async Task OnInitializedAsync()
	{
		await PageVerification();
	}

	private async Task<bool> PageVerification()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/login");

			return false;
		}

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		if (LoggedInUserModel is null)
		{
			navManager.NavigateTo("/notfound", true);

			return false;
		}

		if (LoggedInUserModel.IsConfirmed is null)
		{
			navManager.NavigateTo($"emailconfirmationnotconfirmed");

			return false;
		}

		if (LoggedInUserModel!.IsBanned == "1")
		{
			navManager.NavigateTo("/banned");

			return false;
		}

		isInitialized = true;

		return true;
	}

	private async Task<string> ExecuteRoadmapCreation()
	{
		Roadmap.UserId = LoggedInUserId;

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		Roadmap.AuthorName = LoggedInUserModel.Username;

		var result = await roadmapServiceService.CreateRoadmap(Roadmap);

		roadmapCreationMessage = result;

		if (roadmapCreationMessage != "Roadmap criado com sucesso")
		{
			return "";
		}

		navManager.NavigateTo($"/profile/{LoggedInUserId}");

		return "";
	}
}