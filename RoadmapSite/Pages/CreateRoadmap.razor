@page "/createroadmap"
@inject IRoadmapService roadmapServiceService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager navManager

<AuthorizeView>
	<Authorized>
		<EditForm Model="model" OnValidSubmit="ExecuteRoadmapCreation" Context="Form">
			<div class="form-div">
				<div class="iniciar-sessao-paragraph">
					<p>Criar roadmap</p>
				</div>

				<div class="first-form-label">
					<label for="name" class="visually-hidden">Nome</label>
					<div>
						<InputText id="name" class="form-input-text" @bind-Value="model.Name" placeholder="Nome do Roadmap" />
					</div>
				</div>

				<div class="other-form-label">
					<label for="description" class="visually-hidden">Descrição</label>
					<div>
						<InputTextArea id="description" class="form-input-text-description" @bind-Value="model.Description" placeholder="Descrição (Maximo 500 caracteres)" />
					</div>
				</div>

				<div class="other-form-label">
					<label for="category" class="visually-hidden">Categoria</label>
					<div>
						<InputText id="category" class="form-input-text" @bind-Value="model.Category" placeholder="Categoria" />
					</div>
				</div>

				<div class="button-div">
					<button type="submit" class="first-style-button">Criar Roadmap</button>
				</div>
			</div>
		</EditForm>
	</Authorized>

	<NotAuthorized>
		<div class="not-authorized-message-div">
			<div class="not-authorized-message-p-div">
				<p class="not-authorized-message">Você não esta autorizado para ver esta pagina, entre em uma conta primeiro</p>
			</div>
			<div>
				<a class="first-style-button" href="login">
					Entrar
				</a>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>
<div role="alert" class="alert-message-div">
	<p class="alert-message">@roadmapCreationMessage</p>
</div>

@code {
	private RoadmapClassModel model = new();
	private string roadmapCreationMessage = "";

	private async Task ExecuteRoadmapCreation()
	{
		var createdRoadmap = await TransferUserId(model);

		var result = await roadmapServiceService.CreateRoadmap(createdRoadmap);

		roadmapCreationMessage = result;
		
		navManager.NavigateTo("/");
	}

	private async Task<string> GetUserId()
	{
		var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
		return userId;
	}

	private async Task<RoadmapClassModel> TransferUserId(RoadmapClassModel roadmap)
	{
		roadmap.UserId = new Guid(await GetUserId());

		return roadmap;
	}
}