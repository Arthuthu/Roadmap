@page "/"
@inject IRoadmapService roadmapService
@inject IUserService userService
@inject ILocalStorageService localStorage
@inject IVotingService votingService
@inject AuthenticationStateProvider authenticationStateProvider


<div class="index-create-inicio-button-div">
	<div class="create-roadmap-button-div">
		<a class="first-style-button" href="createroadmap">
			Criar Roadmap
		</a>
	</div>
</div>

<div class="index-buttons-searchbar-div">
	<div class="index-inicio-novo-popular-div">
		<button class="third-style-button" id="inicio-button"
				@onclick="OnInitializedAsync">
			Inicio
		</button>

		<button class="third-style-button"
				@onclick="SortRoadmapsByDate">
			Novo
		</button>

		<button class="third-style-button" id="popularity-button"
				@onclick="SortRoadmapsByPopularity">
			Popular
		</button>
	</div>

	<div class="index-search-input-button-div">
		<div>
			<InputText class="index-search-input" @bind-Value="@roadmapName" placeholder="Procurar por nome" />
		</div>

		<div class="button-div">
			<button @onclick="async () => await GetRoadmapsByName(roadmapName)"
					class="first-style-button" id="index-buscar-button-nome">
				Buscar
			</button>
		</div>
	</div>
</div>


<div class="index-main-div">
	<div class="roadmap-main-div">
		@if (Roadmaps is null)
		{
			<p>No roadmaps found.</p>
		}
		else
		{
			<Virtualize Items="@Roadmaps" Context="roadmap" OverscanCount="50">
				<div class="roadmap-second-div">
					<div onclick="toggleVoteButtonClass(this.querySelector('button'))">
						<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
							@onclick="async () => await votingService.AddUserVote(roadmap.Id, LoggedInUserId)">
							<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
							<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
							Vote
						</button>
					</div>
					<div class="roadmap-box-div">
						<a class="roadmap-name-a" href="roadmapdetails/@roadmap.Id">
							<p class="roadmap-name">@roadmap.Name</p>
						</a>

						<div class="roadmap-description-div">
							<p>@roadmap.Description</p>
						</div>

						<div class="roadmap-category-main-div">
							<div class="roadmap-category-div">
								<div class="roadmap-category-label">
									<p>Categoria:</p>
								</div>
								<div class="roadmap-category-value">
									@roadmap.Category
								</div>
							</div>
						</div>

						<div class="roadmap-created-author-div">
							<div class="roadmad-created-div">
								<div class="roadmap-created-label">
									<p>Criado:</p>
								</div>
								<div class="roadmap-category-value">
									@roadmap.CreatedDate
								</div>
							</div>

							<div class="roadmap-author-div">
								<div class="roadmap-author-label">
									<p>Autor: </p>
								</div>
								<a class="roadmap-author-value" href="profile/@roadmap.AuthorId">
									@roadmap.Author
								</a>
							</div>
						</div>
					</div>
				</div>
			</Virtualize>
		}
	</div>

	<div class="index-categorias-div">
		<div class="index-categorias-label">
			Categorias
		</div>
		<div class="index-categorias-element"
			 @onclick="async () => await GetRoadmapsByCategory(CategoryModel.CSharp)">
			C#
		</div>
		<div class="index-categorias-element"
			 @onclick="async () => await GetRoadmapsByCategory(CategoryModel.Javascript)">
			Javascript
		</div>

		<div>
			<InputText class="index-search-input" @bind-Value="@category" placeholder="Digite aqui uma categoria" />
		</div>

		<div class="button-div">
			<button @onclick="async () => await GetRoadmapsByCustomCategory(category)"
					class="first-style-button" id="index-buscar-button">
				Buscar
			</button>
		</div>
	</div>
</div>
@code {

	private IList<RoadmapClassModel>? Roadmaps;
	private const string RoadmapList = "RoadmapList";
	private const string RoadmapCacheDate = "RoadmapCacheDate";
	private Guid? LoggedInUserId;
	private string? category;
	private string? roadmapName;


	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await votingService.GetLoggedInUserId();
		Roadmaps = await GetAllRoadmaps();
		if (LoggedInUserId != Guid.Empty)
		{
			foreach (var roadmap in Roadmaps!)
			{
				string roadmapClass = await votingService.GetButtonColor(roadmap.Id, LoggedInUserId);
				roadmap.RoadmapHtmlClass = roadmapClass;

				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
		else
		{
			foreach (var roadmap in Roadmaps!)
			{
				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);

				roadmap.RoadmapHtmlClass = "vote-button";
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
	}

	private async Task<IList<RoadmapClassModel>> GetAllRoadmaps()
	{
		var allRoadmaps = await roadmapService.GetAllRoadmaps();
		var roadmaps = allRoadmaps!.Where(x => x.IsApproved == "1" && x.IsHidden == "0").ToList();
		var users = await userService.GetAllUsers();

		foreach (var roadmap in roadmaps!)
		{
			foreach (var user in users)
			{
				if (roadmap.UserId == user.Id)
				{
					roadmap.Author = user.Username;
					roadmap.AuthorId = user.Id.ToString();
				}
			}
		}

		return roadmaps;
	}

	private async Task? GetRoadmapsByCategory(CategoryModel category)
	{
		var roadmaps = await GetAllRoadmaps();

		Roadmaps = roadmaps?.Where(x => x.Category == category.ToString()).ToList();

		await FillRoadmapsButtons();
	}

	private async Task? GetRoadmapsByCustomCategory(string category)
	{
		var roadmaps = await GetAllRoadmaps();

		Roadmaps = roadmaps?.Where(x => x.Category == category).ToList();

		await FillRoadmapsButtons();
	}

	private async Task? GetRoadmapsByName(string name)
	{
		var roadmaps = await GetAllRoadmaps();

		Roadmaps = roadmaps?.Where(x => x.Name!.Contains(name)).ToList();

		await FillRoadmapsButtons();
	}

	private async Task FillRoadmapsButtons()
	{
		var users = await userService.GetAllUsers();

		foreach (var roadmap in Roadmaps!)
		{
			foreach (var user in users)
			{
				if (roadmap.UserId == user.Id)
				{
					roadmap.Author = user.Username;
					roadmap.AuthorId = user.Id.ToString();
				}
			}
		}

		if (LoggedInUserId != Guid.Empty)
		{
			foreach (var roadmap in Roadmaps!)
			{
				string roadmapClass = await votingService.GetButtonColor(roadmap.Id, LoggedInUserId);
				roadmap.RoadmapHtmlClass = roadmapClass;

				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
		else
		{
			foreach (var roadmap in Roadmaps!)
			{
				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);

				roadmap.RoadmapHtmlClass = "vote-button";
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
	}

	private void SortRoadmapsByDate()
	{
		Roadmaps = Roadmaps!.OrderByDescending(x => x.CreatedDate).ToList();
	}


	private void SortRoadmapsByPopularity()
	{
		Roadmaps = Roadmaps!.OrderByDescending(x => x.RoadmapTotalVotes).ToList();
	}
}
