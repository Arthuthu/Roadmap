@page "/"
@inject IRoadmapService roadmapService
@inject IUserService userService

<div class="index-main-div">
	<div class="roadmap-main-div">
		@if (roadmaps != null)
		{
			foreach (var roadmap in roadmaps)
			{
				<div class="roadmap-box-div">
					<div class="roadmap-name-div">
						<p class="roadmap-name">@roadmap.Name</p>
					</div>

					<div class="roadmap-description-div">
						<p>@roadmap.Description</p>
					</div>

					<div class="roadmap-category-author-main-div">
						<div class="roadmap-category-div">
							<div class="roadmap-category-label">
								<p>Categoria:</p>
							</div>
							<div class="roadmap-category-value">
								@roadmap.Category
							</div>
						</div>

						<div class="roadmap-author-div">
							<div class="roadmap-author-label">
								<p>Autor: </p>
							</div>
							<div class="roadmap-author-value">
								@roadmap.Author
							</div>
						</div>
					</div>
				</div>
			}
		}
	</div>

	<div class="create-roadmap-button-div">
		<a class="first-style-button" href="createroadmap">
			Create Roadmap
		</a>
	</div>
</div>




@code {
	private IList<RoadmapClassModel> roadmaps;


	protected override async Task OnInitializedAsync()
	{
		roadmaps = await GetAllRoadmaps();
	}

	private async Task<IList<RoadmapClassModel>> GetAllRoadmaps()
	{
		var roadmaps = await roadmapService.GetAllRoadmaps();
		var users = await userService.GetAllUsers();

		foreach (var roadmap in roadmaps)
		{
			foreach (var user in users)
			{
				if (roadmap.UserId == user.Id)
				{
					roadmap.Author = user.Username;
				}
			}
		}

		return roadmaps;
	}
}


