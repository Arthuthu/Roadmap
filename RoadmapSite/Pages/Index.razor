@page "/"
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject IRoadmapVotingService votingService
@inject ILocalStorageService localStorage

<div class="create-roadmap-button-div">
	<a class="first-style-button" href="createroadmap">
		Criar Roadmap
	</a>
</div>

<div class="index-buttons-searchbar-div">
	<div class="d-flex">
		<button class="index-sort-button"
				@onclick="CleanSearch">
			Limpar
		</button>

		<button class="index-sort-button"
				@onclick="SortRoadmapsByDate">
			Novo
		</button>

		<button class="index-sort-button"
				@onclick="SortRoadmapsByPopularity">
			Popular
		</button>
	</div>

	<div class="w-100">
		<InputText @bind-Value="@roadmapName" class="index-search-input"
		@oninput="(e) => FilterRoadmapByName(e.Value?.ToString()!)"
			placeholder="Procurar roadmap por nome" />
	</div>
</div>

<div class="display-flex">
	<div class="roadmaps-div">
		@if (Roadmaps is null)
		{
			<p>Não há nada aqui.</p>
		}
		else
		{
			<Virtualize Items="@Roadmaps" Context="roadmap" OverscanCount="50">
				<div class="display-flex">
					<div onclick="toggleVoteButtonClass(this.querySelector('button'))">
						<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
							@onclick="async () => await AddUserVote(roadmap.Id)">
							<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
							<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
							Vote
						</button>
					</div>
					<div class="roadmap-div">
						<a class="roadmap-name-label" href="roadmap/@roadmap.Id">
							<p class="roadmap-name-background">@roadmap.Name</p>
						</a>

						<div class="roadmap-description">
							<p>@roadmap.Description</p>
						</div>

						<div>
							<div class="display-flex">
								<div class="roadmap-category-label">
									<p>Categoria:</p>
								</div>
								<div class="roadmap-category">
									@roadmap.Category
								</div>
							</div>
						</div>

						<div class="roadmap-date-author-div">
							<div class="display-flex">
								<div class="roadmap-created-label">
									<p>Criado:</p>
								</div>
								<div>
									@roadmap.CreatedDate
								</div>
							</div>

							<div class="roadmap-author-div">
								<div class="roadmap-author-label">
									<p>Autor: </p>
								</div>
								<a class="roadmap-author" href="profile/@roadmap.AuthorName">
									@roadmap.AuthorName
								</a>
							</div>
						</div>
					</div>
				</div>
			</Virtualize>
		}
	</div>

	<div class="index-categorias-div">
		<div class="index-categorias-label">
			Categorias
		</div>
		<div class="index-categorias"
			 @onclick="async () => await GetRoadmapsByCategory(CategoryModel.CSharp)!">
			C#
		</div>
		<div class="index-categorias"
			 @onclick="async () => await GetRoadmapsByCategory(CategoryModel.Javascript)!">
			Javascript
		</div>

		<div>
			<InputText @bind-Value="@roadmapCategory" class="index-search-input"
			@oninput="(e) => FilterRoadmapByCategory(e.Value?.ToString()!)"
					   placeholder="Procurar roadmap por categoria" />
		</div>
	</div>
</div>

@code {
	private Guid? LoggedInUserId;
	private IList<RoadmapClassModel>? Roadmaps;
	private IList<RoadmapClassModel>? TodosRoadmaps;
	private UserModel? User { get; set; }
	private const string RoadmapList = "RoadmapList";
	private const string RoadmapCacheDate = "RoadmapCacheDate";
	private string? roadmapName;
	private string? roadmapCategory;


	protected override async Task OnInitializedAsync()
	{
		await PageVerification();
	}

	private async Task PageVerification()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();
		Roadmaps = await roadmapService.GetAllApprovedRoadmaps();
		TodosRoadmaps = Roadmaps;

		if (LoggedInUserId != Guid.Empty)
		{
			foreach (var roadmap in TodosRoadmaps!)
			{
				string roadmapClass = await votingService.GetButtonColor(LoggedInUserId, roadmap.Id);
				roadmap.RoadmapHtmlClass = roadmapClass;

				int roadmapTotalVotes = await votingService.GetRoadmapVotes(LoggedInUserId, roadmap.Id);
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
		else
		{
			foreach (var roadmap in TodosRoadmaps!)
			{
				int roadmapTotalVotes = await votingService.GetRoadmapVotes(LoggedInUserId, roadmap.Id);

				roadmap.RoadmapHtmlClass = "vote-button";
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
	}

	private async Task<IList<RoadmapClassModel>?> GetAllApprovedRoadmaps()
	{
		var roadmaps = await roadmapService.GetAllApprovedRoadmaps();

		return roadmaps;
	}


	private async Task FillRoadmapsButtons()
	{
		if (LoggedInUserId != Guid.Empty)
		{
			foreach (var roadmap in Roadmaps!)
			{
				string roadmapClass = await votingService.GetButtonColor(LoggedInUserId, roadmap.Id);
				roadmap.RoadmapHtmlClass = roadmapClass;

				int roadmapTotalVotes = await votingService.GetRoadmapVotes(LoggedInUserId, roadmap.Id);
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
		else
		{
			foreach (var roadmap in Roadmaps!)
			{
				int roadmapTotalVotes = await votingService.GetRoadmapVotes(LoggedInUserId, roadmap.Id);

				roadmap.RoadmapHtmlClass = "vote-button";
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
	}

	private async Task AddUserVote(Guid roadmapId)
	{
		if (LoggedInUserId != Guid.Empty)
		{
			User = await userService.GetUserById(LoggedInUserId);

			if (User is null)
			{
				navManager.NavigateTo("/login");

				return;
			}

			if (User.IsBanned is true)
			{
				navManager.NavigateTo("/banned");
				return;
			}
		}

		await votingService.AddUserVote(LoggedInUserId, roadmapId);

		await OnInitializedAsync();
	}


	private async Task? GetRoadmapsByCategory(CategoryModel category)
	{
		if (TodosRoadmaps is not null)
			Roadmaps = TodosRoadmaps.Where(x => x.Category == category.ToString()).ToList();

		await FillRoadmapsButtons();
	}

	private async Task GetRoadmapsByCustomCategory(string category)
	{
		if (TodosRoadmaps is not null)
			Roadmaps = TodosRoadmaps.Where(x => x.Category == category).ToList();

		await FillRoadmapsButtons();
	}

	private async Task GetRoadmapsByName(string name)
	{
		if (TodosRoadmaps is not null)
			Roadmaps = TodosRoadmaps.Where(x => x.Name == name).ToList();

		await FillRoadmapsButtons();
	}

	private void CleanSearch()
	{
		Roadmaps = TodosRoadmaps;
	}

	private void FilterRoadmapByName(string roadmapName)
	{
		if (roadmapName is not null)
		{
			Roadmaps = TodosRoadmaps!.Where(x => x.Name.ToLower()
				.Contains(roadmapName.ToLower())).ToList();

			if (roadmapName == string.Empty)
				Roadmaps = TodosRoadmaps;
		}
	}

	private void FilterRoadmapByCategory(string roadmapCategory)
	{
		if (roadmapCategory is not null)
		{
			Roadmaps = TodosRoadmaps!.Where(x => x.Category!.ToLower()
				.Contains(roadmapCategory.ToLower())).ToList();

			if (roadmapCategory == string.Empty)
				Roadmaps = TodosRoadmaps;
		}
	}

	private void SortRoadmapsByDate()
	{
		Roadmaps = Roadmaps!.OrderByDescending(x => x.CreatedDate).ToList();
	}

	private void SortRoadmapsByPopularity()
	{
		Roadmaps = Roadmaps!.OrderByDescending(x => x.RoadmapTotalVotes).ToList();
	}
}
