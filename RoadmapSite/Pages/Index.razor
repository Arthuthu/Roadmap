@page "/"
@inject IRoadmapService roadmapService
@inject IRoadmapVotesService roadmapVotesService
@inject IUserService userService
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager navManager

<div class="index-main-div">
	<div class="roadmap-main-div">
		@if (Roadmaps is null)
		{
			<p>No roadmaps found.</p>
		}
		else
		{
			@foreach (var roadmap in Roadmaps)
			{
				<div class="roadmap-second-div">
					<div onclick ="toggleVoteButtonClass(this.querySelector('button'))">
						<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
						@onclick="async () => await AddUserVote(roadmap.Id)">
							<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
							<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
							Vote
						</button>
					</div>
					<div class="roadmap-box-div">
						<a class="roadmap-name-a" href="roadmapdetails/@roadmap.Id">
							<p class="roadmap-name">@roadmap.Name</p>
						</a>

						<div class="roadmap-description-div">
							<p>@roadmap.Description</p>
						</div>

						<div class="roadmap-category-author-main-div">
							<div class="roadmap-category-div">
								<div class="roadmap-category-label">
									<p>Categoria:</p>
								</div>
								<div class="roadmap-category-value">
									@roadmap.Category
								</div>
							</div>

							<div class="roadmap-author-div">
								<div class="roadmap-author-label">
									<p>Autor: </p>
								</div>
								<a class="roadmap-author-value" href="profile/@roadmap.AuthorId">
									@roadmap.Author
								</a>
							</div>
						</div>
					</div>
				</div>
			}
		}
	</div>

	<div class="create-roadmap-button-div">
		<a class="first-style-button" href="createroadmap">
			Create Roadmap
		</a>
	</div>
</div>
@code {

	private IList<RoadmapClassModel>? Roadmaps;
	private const string RoadmapList = "RoadmapList";
	private const string RoadmapCacheDate = "RoadmapCacheDate";
	private string? LoggedInUserId = "";

	protected override async Task OnInitializedAsync()
	{
		await GetUserId();

		Roadmaps = await localStorage.GetItemAsync<IList<RoadmapClassModel>>(RoadmapList);
		DateTime? cacheDate = await localStorage.GetItemAsync<DateTime>(RoadmapCacheDate);
		double totalSeconds = 0;

		if (cacheDate is not null)
		{
			totalSeconds = DateTime.UtcNow.Subtract((DateTime)cacheDate).Seconds;
		}

		if (Roadmaps is null || cacheDate is null || totalSeconds > 1)
		{
			try
			{
				Roadmaps = await GetAllRoadmaps();
				await localStorage.SetItemAsync(RoadmapList, Roadmaps);
				await localStorage.SetItemAsync(RoadmapCacheDate, DateTime.UtcNow);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Ocorreu um erro para carregar a pagina: {ex.Message}");
			}
		}

		foreach (var roadmap in Roadmaps)
		{
			string roadmapClass = await GetButtonColor(roadmap.Id);
			roadmap.RoadmapHtmlClass = roadmapClass;

			int roadmapTotalVotes = await GetRoadmapVotes(roadmap.Id);
			roadmap.RoadmapTotalVotes = roadmapTotalVotes;
		}
	}

	private async Task<IList<RoadmapClassModel>> GetAllRoadmaps()
	{
		var roadmaps = await roadmapService.GetAllRoadmaps();
		var users = await userService.GetAllUsers();

		foreach (var roadmap in roadmaps)
		{
			foreach (var user in users)
			{
				if (roadmap.UserId == user.Id)
				{
					roadmap.Author = user.Username;
					roadmap.AuthorId = user.Id.ToString();
				}
			}
		}

		return roadmaps;
	}

	private async Task GetUserId()
	{
		var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		if (userId is null)
		{
			LoggedInUserId = "";
			throw new Exception("Usuario nao esta logado");
		}

		LoggedInUserId = userId;
	}

	private async Task AddUserVote(Guid roadmapId)
	{
		RoadmapVotesModel roadmapVote = new();
		roadmapVote.UserId = new Guid(LoggedInUserId);
		roadmapVote.RoadmapId = new Guid(roadmapId.ToString());

		if (roadmapVote.UserId is null)
		{
			throw new Exception("Você precisa entrar em uma conta para votar");
			navManager.NavigateTo("/login");
		}

		var didUserVotedOnRoadmap = await VerifiyIfUserVotedOnRoadmap(roadmapId);

		if (didUserVotedOnRoadmap is true)
		{
			var votedRoadmapId = await GetRoadmapVoteIdByUserAndRoadmapId(roadmapVote.RoadmapId);
			await roadmapVotesService.RemoveRoadmapVote(votedRoadmapId);
		}
		else
		{
			await roadmapVotesService.AddRoadmapVote(roadmapVote);
		}
	}

	private async Task<IList<RoadmapVotesModel>> GetAllRoadmapsUserVoted(Guid id)
	{
		var roadmaps = await roadmapVotesService.GetAllRoadmapsUserVoted(id);

		return roadmaps;
	}



	private async Task<bool> VerifiyIfUserVotedOnRoadmap(Guid roadmapId)
	{
		var roadmaps = await GetAllRoadmapsUserVoted(new Guid(LoggedInUserId));

		foreach (var roadmap in roadmaps)
		{
			if (roadmap.RoadmapId == roadmapId)
			{
				return true;
			}
		}

		return false;
	}

	private async Task<Guid> GetRoadmapVoteIdByUserAndRoadmapId(Guid roadmapId)
	{
		var userId = new Guid(LoggedInUserId);

		var roadmapVote = await roadmapVotesService.GetRoadmapVoteIdByUserAndRoadmapId(userId, roadmapId);
		var voteId = roadmapVote.Id;

		return voteId;
	}

	private async Task<string> GetButtonColor(Guid roadmapId)
	{
		var result = await VerifiyIfUserVotedOnRoadmap(roadmapId);

		if (result is true)
		{
			return "vote-button-voted";
		}

		return "vote-button";
	}

	private async Task<int> GetRoadmapVotes(Guid roadmapId)
	{
		var roadmapVotes = await roadmapVotesService.GetRoadmapVotesByRoadmapId(roadmapId);

		return roadmapVotes.Count();
	}
}
