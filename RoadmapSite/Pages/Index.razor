@page "/"
@inject IRoadmapService roadmapService
@inject IUserService userService
@inject ILocalStorageService localStorage
@inject IRoadmapVotingService votingService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authenticationStateProvider

<div>
	<div class="create-roadmap-button-div">
		<a class="first-style-button" href="createroadmap">
			Criar Roadmap
		</a>
	</div>
</div>

<div class="index-buttons-searchbar-div">
	<div>
		<button class="index-sort-button"
				@onclick="OnInitializedAsync">
			Inicio
		</button>

		<button class="index-sort-button"
				@onclick="SortRoadmapsByDate">
			Novo
		</button>

		<button class="index-sort-button"
				@onclick="SortRoadmapsByPopularity">
			Popular
		</button>
	</div>

	<div class="index-search-input-buttons-div">
		<div>
			<InputText class="index-search-input" @bind-Value="@roadmapName" 
			placeholder="Procurar por nome" id="buscar-nome-input"/>
		</div>

		<div class="index-buscar-button-div" onclick="clearBuscarNomeInput()">
			<button @onclick="async () => await GetRoadmapsByName(roadmapName)"
					class="index-sort-button">
				Buscar
			</button>
		</div>
	</div>
</div>


<div class="display-flex">
	<div class="roadmaps-div">
		@if (Roadmaps is null)
		{
			<p>Não há nada aqui.</p>
		}
		else
		{
			<Virtualize Items="@Roadmaps" Context="roadmap" OverscanCount="50">
				<div class="display-flex">
					<div onclick="toggleVoteButtonClass(this.querySelector('button'))">
						<button class="@roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
							@onclick="async () => await AddUserVote(roadmap.Id)">
							<span id="vote-count">@roadmap.RoadmapTotalVotes</span>
							<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
							Vote
						</button>
					</div>
					<div class="roadmap-div">
						<a class="roadmap-name-label" href="roadmapdetails/@roadmap.Id">
							<p class="roadmap-name-background">@roadmap.Name</p>
						</a>

						<div class="roadmap-description">
							<p>@roadmap.Description</p>
						</div>

						<div>
							<div class="display-flex">
								<div class="roadmap-category-label">
									<p>Categoria:</p>
								</div>
								<div class="roadmap-category">
									@roadmap.Category
								</div>
							</div>
						</div>

						<div class="roadmap-date-author-div">
							<div class="display-flex">
								<div class="roadmap-created-label">
									<p>Criado:</p>
								</div>
								<div>
									@roadmap.CreatedDate
								</div>
							</div>

							<div class="roadmap-author-div">
								<div class="roadmap-author-label">
									<p>Autor: </p>
								</div>
								<a class="roadmap-author" href="profile/@roadmap.UserId">
									@roadmap.AuthorName
								</a>
							</div>
						</div>
					</div>
				</div>
			</Virtualize>
		}
	</div>

	<div class="index-categorias-div">
		<div class="index-categorias-label">
			Categorias
		</div>
		<div class="index-categorias"
			 @onclick="async () => await GetRoadmapsByCategory(CategoryModel.CSharp)">
			C#
		</div>
		<div class="index-categorias"
			 @onclick="async () => await GetRoadmapsByCategory(CategoryModel.Javascript)">
			Javascript
		</div>

		<div>
			<InputText class="index-search-input" @bind-Value="@category" placeholder="Digite aqui uma categoria" />
		</div>

		<div>
			<button @onclick="async () => await GetRoadmapsByCustomCategory(category)"
				class="first-style-button" id="index-buscar-button">
				Buscar
			</button>
		</div>
	</div>
</div>

@code {

	private UserModel? User { get; set; }
	private IList<RoadmapClassModel>? Roadmaps;
	private const string RoadmapList = "RoadmapList";
	private const string RoadmapCacheDate = "RoadmapCacheDate";
	private Guid? LoggedInUserId;
	private string? category;
	private string? roadmapName;


	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();
		Roadmaps = await GetAllRoadmaps();

		if (LoggedInUserId != Guid.Empty)
		{
			foreach (var roadmap in Roadmaps!)
			{
				string roadmapClass = await votingService.GetButtonColor(roadmap.Id, LoggedInUserId);
				roadmap.RoadmapHtmlClass = roadmapClass;

				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
		else
		{
			foreach (var roadmap in Roadmaps!)
			{
				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);

				roadmap.RoadmapHtmlClass = "vote-button";
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
	}

	private async Task<IList<RoadmapClassModel>> GetAllRoadmaps()
	{
		var allRoadmaps = await roadmapService.GetAllRoadmaps();
		var roadmaps = allRoadmaps!.Where(x => x.IsApproved == "1").ToList();

		return roadmaps;
	}

	private async Task? GetRoadmapsByCategory(CategoryModel category)
	{
		var roadmaps = await GetAllRoadmaps();

		Roadmaps = roadmaps?.Where(x => x.Category == category.ToString()).ToList();

		await FillRoadmapsButtons();
	}

	private async Task? GetRoadmapsByCustomCategory(string category)
	{
		var roadmaps = await GetAllRoadmaps();

		Roadmaps = roadmaps?.Where(x => x.Category!.ToLower().Contains(category.ToLower())).ToList();

		await FillRoadmapsButtons();
	}

	private async Task GetRoadmapsByName(string name)
	{
		var roadmaps = await GetAllRoadmaps();

		Roadmaps = roadmaps?.Where(x => x.Name!.ToLower().Contains(name.ToLower())).ToList();

		await FillRoadmapsButtons();
	}

	private async Task FillRoadmapsButtons()
	{
		var users = await userService.GetAllUsers();

		if (LoggedInUserId != Guid.Empty)
		{
			foreach (var roadmap in Roadmaps!)
			{
				string roadmapClass = await votingService.GetButtonColor(roadmap.Id, LoggedInUserId);
				roadmap.RoadmapHtmlClass = roadmapClass;

				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
		else
		{
			foreach (var roadmap in Roadmaps!)
			{
				int roadmapTotalVotes = await votingService.GetRoadmapVotes(roadmap.Id);

				roadmap.RoadmapHtmlClass = "vote-button";
				roadmap.RoadmapTotalVotes = roadmapTotalVotes;
			}
		}
	}

	private void SortRoadmapsByDate()
	{
		Roadmaps = Roadmaps!.OrderByDescending(x => x.CreatedDate).ToList();
	}


	private void SortRoadmapsByPopularity()
	{
		Roadmaps = Roadmaps!.OrderByDescending(x => x.RoadmapTotalVotes).ToList();
	}

	private async Task AddUserVote(Guid roadmapId)
	{
		if (LoggedInUserId != Guid.Empty)
		{
			User = await userService.GetUserById(LoggedInUserId);

			if (User.IsBanned == "1")
			{
				navManager.NavigateTo("/banned");
				return;
			}
		}

		await votingService.AddUserVote(roadmapId, LoggedInUserId);

		await OnInitializedAsync();
	}
}
