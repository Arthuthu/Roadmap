@page "/passwordchange/{restorationcode}"
@inject IUserService userService
@inject NavigationManager navManager

@if (isInitialized)
{
	<EditForm Model="User" OnValidSubmit="UpdatePassword">
		<div class="text-center">
			<div>
				<div class="my-2 fw-bold h5">
					Nova Senha
				</div>
				<div>
					<InputText id="password" class="form-input-text" 
					@bind-Value="User!.Password" placeholder="Senha" type="password"/>
				</div>
		</div>
			<div>
					<div class="my-2 fw-bold h5">
					Confirmar senha
				</div>
				<div>
					<InputText id="confirmpassword" class="form-input-text" 
					@bind-Value="ConfirmPassword" placeholder="Confirmar Senha" type="password"/>
				</div>
			</div>
		</div>

		<div class="text-center">
			<button class="first-style-button" type="submit">
				Atualizar
			</button>
		</div>
	</EditForm>

	<div class="text-center text-danger fw-bold my-4 h4">
		@errorMessage
	</div>
}

@code {
	[Parameter]
	public string? RestorationCode { get; set; }
	private UserModel? User = new();
	private string? ConfirmPassword = string.Empty;
	private string errorMessage = "";
	private bool isInitialized = false;

	protected override async Task OnInitializedAsync()
	{
		await PageVerification();
	}

	private async Task<bool> PageVerification()
	{
		if (RestorationCode is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		User = await userService.GetUserByRestorationCode(new Guid(RestorationCode));

		if (User is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		if (User.RestorationCodeExpirationDate < DateTime.UtcNow.AddHours(-3))
		{
			navManager.NavigateTo("/restorationexpired");
		}

		isInitialized = true;

		return true;
	}

	private async Task<bool> UpdatePassword()
	{
		if (User!.Password != ConfirmPassword)
		{
			errorMessage = "As senhas não coincidem.";

			return false;
		}

		if (User!.Password!.Length < 8)
		{
			errorMessage = "A senha não pode ter menos que 8 caracteres";

			return false;
		}

		User.RestorationCodeExpirationDate = DateTime.UtcNow.AddDays(-1);

		await userService.UpdateUserPassword(User!);

		navManager.NavigateTo("/passwordchangeconfirmed");

		return true;
	}
}
