@page "/roadmapdetails/{roadmapid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject IRoadmapVotingService roadmapVotingService
@inject IRoadmapVotesService roadmapVotesService
@inject INodeService nodeService
@inject IComentarioService comentarioService
@inject IComentarioVotingService comentarioVotingService


@if (isInitialized)
{
	<div>
		<div class="details-roadmap-div">
			<div>
				@Roadmap!.Name
			</div>

			<div>
				@Roadmap.Category
			</div>
		</div>
		<div class="details-description-div">
			@Roadmap.Description
		</div>
	</div>

	<div class="nodes-box">
		@if(Nodes is not null)
		{
			@foreach (var node in Nodes)
			{
				<div class="text-center">
					<button class="node" @onclick="() => ToggleShowNodeContent(node.Id)">
						@node.Name
					</button>
					@if (editMode)
					{
						<div class="node-edit-buttons">
							<div>
								<button class="second-style-button"
						@onclick="async () => await DeleteNode(node.Id)">
									Excluir
								</button>
							</div>
							<div>
								<a class="second-style-button" href="/editnode/@node.Id">
									Editar
								</a>
							</div>
						</div>
					}
				</div>

				if (showNodeContent.ContainsKey(node.Id) && showNodeContent[node.Id])
				{
					<div>
						<NodeContent NodeId="@node.Id" Description="@node.Description" />
					</div>
				}

				<div class="text-center">
					<i class="fa-solid fa-arrow-down" id="arrow-icon"></i>
				</div>
			}
			<button class="node">
				Fim
			</button>
		}
		else
		{
			<div>
				Não existe nenhum conteudo nesse roadmap ainda.
			</div>
		}

		@if (Roadmap.UserId == LoggedInUserId)
		{
			<EditForm Model="@Node" OnValidSubmit="CreateNode" class="" Context="NodeForm">
				<div class="text-center">
					<label for="titulo" class="visually-hidden">Titulo</label>
					<div>
						<InputText id="node-input" class="node-input-text" @bind-Value="Node.Name" placeholder="Nome" />
					</div>
				</div>

				<div>
					<button type="submit" class="first-style-button" id="adicionar-node-button"
					onclick="clearNodeInput()">Adicionar</button>

					<button class="first-style-button" @onclick=ToggleEditMode>
						Editar
					</button>
				</div>
			</EditForm>
		}
	</div>

	<div>
		@if (LoggedInUserModel!.IsAdmin is true && Roadmap.IsApproved == false)
		{
			<div class="text-center text-info h4 my-4">
				Este roadmap não foi aprovado
			</div>
			<div class="text-center my-4">
				<button class="first-style-button" @onclick="async () => await ApproveRoadmap(Roadmap)">
					Aprovar
				</button>
			</div>
		}
	</div>

	<div class="text-center">
		<div onclick="toggleVoteButtonDetailsClass(this.querySelector('button'))">
			<button class="@Roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
			@onclick="async () => await AddUserVoteOnRoadmap(Roadmap.Id)">
				<span id="vote-count">@Roadmap.RoadmapTotalVotes</span>
				<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
				Vote
			</button>
		</div>
	</div>

	<div class="text-center">
		<button @onclick="ToggleShowRoadmapEditOptions" class="second-style-button">
			Opções
		</button>

		@if (showRoadmapEditOptions)
		{
			@if (Roadmap.UserId == LoggedInUserId || LoggedInUserModel!.IsAdmin is true)
			{
				@if (LoggedInUserModel!.IsAdmin is false)
				{
					<div>
						<button @onclick="ToggleShowDeletePageAuthor" class="second-style-button">
							Excluir Roadmap
						</button>
					</div>
				}
				else if (LoggedInUserModel.IsAdmin is true)
				{
					<div>
						<button @onclick="ToggleShowDeletePageAdmin" class="second-style-button">
							Excluir Roadmap
						</button>
					</div>
				}
			}

			<div>
				<button class="second-style-button" @onclick=ToggleShowDenunciaScreenRoadmap>
					Denunciar
				</button>
			</div>

			@if (showDenunciaScreenRoadmap)
			{
				<CreateDenuncia Type="Roadmap" Id="@Roadmap.Id.ToString()" />
			}
		}
	</div>

	if (showDeletePageAuthor)
	{
		<DeleteRoadmapConfirmation RoadmapId="@RoadmapId" />
	}

	if (showDeletePageAdmin)
	{
		<AdminDeleteRoadmapConfirmation RoadmapId="@RoadmapId" />
	}

	<div>
		<EditForm Model="@Comentario" OnValidSubmit="CommentOnRoadmap" Context="ComentarioForm">
			<div>
				<InputTextArea id="comment-input" class="comment-input-area" @bind-Value="Comentario.Description"
				placeholder="Adicione um comentario (Maximo 1000 caracteres)" />
			</div>
			<div class="text-center">
				<button type="submit" class="first-style-button" onclick="clearComentarioInput()">Comentar</button>
			</div>
		</EditForm>
	</div>


	<div class="comment-count-buttons-div">
		<div class="comment-count-div">
			@if (Comentarios is not null)
			{
				<p>@Comentarios.Count() Comentarios</p>
			}
			else
			{
				<p>0 Comentarios</p>
			}
		</div>

		<div>
			<button @onclick="SortComentariosByNew" id="roadmap-details-management-button"
		class="second-style-button">
				Novo
			</button>

			<button @onclick="SortComentariosByPopularity" id="roadmap-details-management-button"
		class="second-style-button">
				Top
			</button>
		</div>
	</div>


	<Virtualize Items="@Comentarios" Context="comentario" OverscanCount="50">
		<div class="comment-box">
			<div class="comment-profile-picture-div">
				<img class="comment-profile-picture" src="@DefaultProfilePicture" />
			</div>
			<div class="comment-div">
				<div class="comment-info-div">
					<a class="comment-author" href="/profile/@comentario.AuthorName">
						@comentario.AuthorName
					</a>

					<div class="comment-date">
						@comentario.CreatedDate
					</div>
				</div>

				<div class="comment-description-div">
					<div>
						<div class="comment-description">
							@comentario.Description
						</div>

						<div class="comment-buttons-div">
							<div onclick="toggleComentarioVoteButtonClass(this.querySelector('button'))">
								<button class="@comentario.ComentarioHtmlClass" id="roadmap-vote-button"
								@onclick="async () => await AddUserVoteOnComentario(comentario.Id)">
									<div class="vote-icon">
										<i class="fas fa-caret-up"></i>
									</div>
								</button>
							</div>

							<div class="vote-count-div">
								<span id="vote-count">@comentario.ComentarioTotalVotes</span>
							</div>
						</div>
					</div>
					<div class="comment-options-div">
						<div>
							@if (comentario.AuthorId == LoggedInUserId || LoggedInUserModel!.IsAdmin is true)
							{
								<button @onclick="ToggleShowDeleteComment"
								class="second-style-button">
									Excluir
								</button>

								if (showDeleteComment)
								{
									<button @onclick="async () => await DeleteComment(comentario.Id)"
									class="second-style-button" id="confirm-button">
										Confirmar
									</button>
								}
							}
						</div>
						<div>
							<button class="second-style-button" 
							@onclick="() => ToggleShowDenunciaScreenComment(comentario.Id)">
								Denunciar
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		@if (showDenunciaScreenComment.ContainsKey(comentario.Id)
			&& showDenunciaScreenComment[comentario.Id])
		{
			<div>
				<CreateDenuncia Type="Comment" Id="@comentario.Id.ToString()" />
			</div>
		}
	</Virtualize>
}

@code {
	[Parameter]
	public string? RoadmapId { get; set; }
	private Guid? LoggedInUserId { get; set; }
	private IList<ComentarioModel>? Comentarios { get; set; }
	private IList<NodeModel>? Nodes { get; set; }
	private Dictionary<Guid, bool> showNodeContent = new Dictionary<Guid, bool>();
	private Dictionary<Guid, bool> showDenunciaScreenComment = new Dictionary<Guid, bool>();
	private RoadmapClassModel? Roadmap { get; set; }
	private UserModel? LoggedInUserModel { get; set; }
	private NodeModel? Node = new();
	private ComentarioModel? Comentario = new();
	private bool editMode = false;
	private bool showDenunciaScreenRoadmap = false;
	private bool showRoadmapEditOptions = false;
	private bool showDeleteComment = false;
	private bool showDeletePageAuthor = false;
	private bool showDeletePageAdmin = false;
	private bool isInitialized = false;
	const string DefaultProfilePicture = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png";


	protected override async Task OnInitializedAsync()
	{
		await PageVerification();
	}

	protected override async Task OnParametersSetAsync()
	{
		await PageVerification();
	}

	private async Task<bool> PageVerification()
	{
		if (RoadmapId is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/login");

			return false;
		}

		Roadmap = await roadmapService.GetRoadmapById(new Guid(RoadmapId!));

		if (Roadmap is null)
		{
			navManager.NavigateTo("/notfound");

			return false;
		}

		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

		if (LoggedInUserModel.IsConfirmed is false)
		{
			navManager.NavigateTo("/emailnotconfirmed");

			return false;
		}

		if (LoggedInUserModel.IsBanned is true)
		{
			navManager.NavigateTo("/banned");

			return false;
		}

		await LoadPageData();

		isInitialized = true;

		return true;
	}

	private async Task LoadPageData()
	{
		await GetAllComentarios();
		await GetAllNodes();
		await UpdateRoadmapVoteButton();
		await UpdateComentarioVoteButton();
	}

	//Roadmap Votes

	private async Task AddUserVoteOnRoadmap(Guid roadmapId)
	{
		await roadmapVotingService.AddUserVote(roadmapId, LoggedInUserId);

		await UpdateRoadmapVoteButton();
	}

	private async Task UpdateRoadmapVoteButton()
	{
		string roadmapClass = await GetButtonColorDetails(Roadmap.Id, LoggedInUserId);
		Roadmap.RoadmapHtmlClass = roadmapClass;

		int roadmapTotalVotes = await roadmapVotingService.GetRoadmapVotes(Roadmap.Id);
		Roadmap.RoadmapTotalVotes = roadmapTotalVotes;
	}

	private async Task<string> GetButtonColorDetails(Guid roadmapId, Guid? loggedInUserId)
	{
		var roadmapVotes = await roadmapVotesService.GetAllRoadmapVotes();

		var votedRoadmapId = roadmapVotes!
			.Where(x => x.UserId == loggedInUserId && x.RoadmapId == roadmapId)
			.Select(x => x.Id).FirstOrDefault();

		if (votedRoadmapId == Guid.Empty)
		{
			return "vote-button-details";

		}
		else
		{
			return "vote-button-voted-details";
		}
	}

	// Nodes

	private async Task CreateNode()
	{
		Node!.RoadmapId = new Guid(RoadmapId!);
		await nodeService.CreateNode(Node);

		await GetAllNodes();
	}

	private async Task GetAllNodes()
	{
		var nodes = await nodeService.GetAllNodes(new Guid(RoadmapId!));

		if (nodes is not null)
		{
			Nodes = nodes.OrderBy(x => x.CreatedDate).ToList();
		}
	}

	private async Task DeleteNode(Guid nodeId)
	{
		await nodeService.DeleteNode(nodeId);
		await GetAllNodes();
	}

	//Comments

	private async Task GetAllComentarios()
	{
		var comentarios = await comentarioService.GetAllComentariosByRoadmapId(new Guid(RoadmapId!));

		Comentarios = comentarios?.OrderByDescending(x => x.CreatedDate).ToList();
	}

	private async Task CommentOnRoadmap()
	{
		Comentario!.RoadmapId = new Guid(RoadmapId!);
		Comentario.UserId = LoggedInUserId;
		Comentario.AuthorName = LoggedInUserModel!.Username;
		await comentarioService.CreateComentario(Comentario);

		await GetAllComentarios();
		await UpdateComentarioVoteButton();
	}

	private async Task DeleteComment(Guid comentarioId)
	{
		await comentarioService.DeleteComentario(comentarioId);

		var comentario = Comentarios!.FirstOrDefault(x => x.Id == comentarioId);

		if (comentario is not null)
		{
			Comentarios!.Remove(comentario);
		}
	}

	//Actual
	private async Task ApproveRoadmap(RoadmapClassModel roadmap)
	{
		roadmap.IsApproved = true;

		await roadmapService.UpdateRoadmap(roadmap);
		navManager.NavigateTo("/administration");
	}

	private async Task AddUserVoteOnComentario(Guid comentarioId)
	{
		await comentarioVotingService.AddUserVote(comentarioId, LoggedInUserId);

		await GetAllComentarios();
		await UpdateComentarioVoteButton();
	}

	private async Task UpdateComentarioVoteButton()
	{
		if (Comentarios is not null)
		{
			foreach (var comentario in Comentarios)
			{
				string comentarioClass = await comentarioVotingService.GetButtonColor(comentario.Id, LoggedInUserId);
				comentario.ComentarioHtmlClass = comentarioClass;

				int comentarioTotalVotes = await comentarioVotingService.GetComentarioVotes(comentario.Id, LoggedInUserId);
				comentario.ComentarioTotalVotes = comentarioTotalVotes;
			}
		}
	}

	//Sorts
	private void SortComentariosByNew()
	{
		if (Comentarios is not null)
		{
			Comentarios = Comentarios.OrderByDescending(x => x.CreatedDate).ToList();
		}
	}

	private void SortComentariosByPopularity()
	{
		if (Comentarios is not null)
		{
			Comentarios = Comentarios.OrderByDescending(x => x.ComentarioTotalVotes).ToList();
		}
	}

	//Toggles
	private void ToggleShowRoadmapEditOptions()
	{
		showRoadmapEditOptions = !showRoadmapEditOptions;
	}

	private void ToggleEditMode()
	{
		editMode = !editMode;
	}

	private void ToggleShowDeletePageAuthor()
	{
		showDeletePageAuthor = !showDeletePageAuthor;
	}

	private void ToggleShowDeletePageAdmin()
	{
		showDeletePageAdmin = !showDeletePageAdmin;
	}

	private void ToggleShowDeleteComment()
	{
		showDeleteComment = !showDeleteComment;
	}

	private void ToggleShowDenunciaScreenRoadmap()
	{
		showDenunciaScreenRoadmap = !showDenunciaScreenRoadmap;
	}

	private void ToggleShowDenunciaScreenComment(Guid comentarioId)
	{
		if (showDenunciaScreenComment.ContainsKey(comentarioId))
		{
			showDenunciaScreenComment[comentarioId] = !showDenunciaScreenComment[comentarioId];
		}
		else
		{
			showDenunciaScreenComment[comentarioId] = true;
		}
	}

	private void ToggleShowNodeContent(Guid nodeId)
	{
		if (showNodeContent.ContainsKey(nodeId))
		{
			showNodeContent[nodeId] = !showNodeContent[nodeId];
		}
		else
		{
			showNodeContent[nodeId] = true;
		}
	}
}
