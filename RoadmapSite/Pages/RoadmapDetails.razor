@page "/roadmapdetails/{roadmapid}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService
@inject INodeService nodeService
@inject IRoadmapService roadmapService
@inject IComentarioService comentarioService
@inject IComentarioVotingService comentarioVotingService
@inject IRoadmapVotingService roadmapVotingService
@inject IRoadmapVotesService roadmapVotesService

@if (isInitialized)
{
	@if (Roadmap is not null)
	{
		<div>
			<div class="roadmap-details-name-category-div">
				<div>
					@Roadmap.Name
				</div>

				<div>
					@Roadmap.Category
				</div>
			</div>
			<div class="roadmap-details-description-div">
				@Roadmap.Description
			</div>
		</div>

		<div class="nodes-box">
			@if(Nodes is not null)
			{
				@foreach (var node in Nodes)
				{
					<div class="node-button-div">
						<button class="node-button">
							@node.Name
						</button>
						@if (editMode)
						{
							<button class="delete-roadmap-button"
							@onclick="async () => await DeleteNode(node.Id)">
								X
							</button>
						}
					</div>

					<div class="node-arrow-icon-div">
						<i class="fa-solid fa-arrow-down" id="arrow-icon"></i>
					</div>
				}
				<button class="node-button">
					Fim
				</button>
			}
			else
			{
				<div>
					Não existe nenhum conteudo nesse roadmap ainda.
				</div>
			}

			@if (Roadmap.UserId == LoggedInUserId)
			{
				<EditForm Model="@Node" OnValidSubmit="CreateNode" class="" Context="NodeForm">
					<div class="node-input-text-div">
						<label for="titulo" class="visually-hidden">Titulo</label>
						<div>
							<InputText id="node-input" class="node-name-input-text" @bind-Value="Node.Name" placeholder="Nome" />
						</div>
					</div>

					<div class="button-div">
						<button type="submit" class="first-style-button" id="adicionar-node-button"
						onclick="clearNodeInput()">Adicionar</button>
					</div>
				</EditForm>
			}
		</div>

		<div class="roadmap-details-vote-button">
			<div onclick="toggleVoteButtonDetailsClass(this.querySelector('button'))">
				<button class="@Roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
				@onclick="async () => await AddUserVoteOnRoadmap(Roadmap.Id)">
					<span id="vote-count">@Roadmap.RoadmapTotalVotes</span>
					<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
					Vote
				</button>
			</div>
		</div>

		<div class="roadmap-manage-buttons-div">
			@if (Roadmap.UserId == LoggedInUserId || LoggedInUserModel!.IsAdmin == "1")
			{
				@if (LoggedInUserModel!.IsAdmin is null)
				{
					<div>
						<a href="deleteroadmapconfirmation/@Roadmap.Id" class="first-style-button"
						   id="roadmap-details-management-button">
							Excluir Roadmap
						</a>
					</div>
				}
				else if (LoggedInUserModel.IsAdmin == "1")
				{
					<div>
						<a href="admindeleteroadmapconfirmation/@Roadmap.Id" class="first-style-button"
						   id="roadmap-details-management-button">
							Excluir Roadmap
						</a>
					</div>
				}

				<div>
					<button @onclick="async () => await ToggleEditMode()" id="roadmap-details-management-button"
					class="first-style-button">
						Editar
					</button>
				</div>
			}
		</div>

		<div class="comentar-div">
			<EditForm Model="@Comentario" OnValidSubmit="CommentOnRoadmap" Context="ComentarioForm">
				<div>
					<InputTextArea id="comment-input" class="roadmap-details-comentario-text-area" @bind-Value="Comentario.Description"
				 placeholder="Adicione um comentario (Maximo 1000 caracteres)" />
				</div>
				<div class="text-center">
					<button type="submit" class="first-style-button" onclick="clearComentarioInput()">Comentar</button>
				</div>
			</EditForm>
		</div>


		<div class="comment-count-buttons-div">
			<div class="comment-count-div">
				@if (Comentarios is not null)
				{
					<p>@Comentarios.Count() Comentarios</p>
				}
				else
				{
					<p>0 Comentarios</p>
				}
			</div>

			<div>
				<button @onclick="SortComentariosByNew" id="roadmap-details-management-button"
			class="comment-sort-button">
					Novo
				</button>

				<button @onclick="SortComentariosByPopularity" id="roadmap-details-management-button"
			class="comment-sort-button">
					Top
				</button>
			</div>
		</div>


		<Virtualize Items="@Comentarios" Context="comentario" OverscanCount="50">
			<div class="roadmap-details-comentario-box">
				<div class="comment-profile-picture-div">
					<img class="comment-profile-picture" src="@DefaultProfilePicture" />
				</div>
				<div class="comment-data-div">
					<div class="rodmap-details-comentario-author-createddate">
						<a class="roadmap-details-author" href="/profile/@comentario.AuthorId">
							@comentario.Author
						</a>

						<div class="roadmap-details-createddate">
							@comentario.CreatedDate
						</div>
					</div>

					<div class="roadmap-details-comentario-descricao-button-div">
						<div>
							<div class="roadmap-details-comentario">
								@comentario.Description
							</div>

							<div class="comentario-vote-button-div">
								<div onclick="toggleComentarioVoteButtonClass(this.querySelector('button'))">
									<button class="@comentario.ComentarioHtmlClass" id="roadmap-vote-button"
									@onclick="async () => await AddUserVoteOnComentario(comentario.Id)">
										<div class="vote-icon">
											<i class="fas fa-caret-up"></i>
										</div>
									</button>
								</div>
								<div class="vote-count-div">
									<span id="vote-count">@comentario.ComentarioTotalVotes</span>
								</div>
							</div>
						</div>

						<div>
							@if (comentario.AuthorId == LoggedInUserId || LoggedInUserModel.IsAdmin == "1")
							{
								<button @onclick="async () => await DeleteComment(comentario.Id)"
				   class="delete-comment-button">
									Excluir
								</button>
							}
						</div>
					</div>
				</div>
			</div>
		</Virtualize>
	}
}

@code {
	[Parameter]
	public string? RoadmapId { get; set; }
	private Guid? LoggedInUserId { get; set; }
	private RoadmapClassModel? Roadmap { get; set; }
	private UserModel? LoggedInUserModel { get; set; }
	private NodeModel? Node = new();
	private ComentarioModel? Comentario = new();
	private IList<ComentarioModel>? Comentarios { get; set; }
	private IList<NodeModel>? Nodes { get; set; }
	private bool editMode = false;
	private bool isInitialized = false;
	const string DefaultProfilePicture = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png";


	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/login");
		}

		await GetRoadmapById(new Guid(RoadmapId!));

		if (RoadmapId == Guid.Empty.ToString())
		{
			navManager.NavigateTo("/");
		}

		await LoadPageData();

		isInitialized = true;
	}

	protected override async Task OnParametersSetAsync()
	{
		LoggedInUserId = await userService.GetLoggedInUserId();

		if (LoggedInUserId == Guid.Empty)
		{
			navManager.NavigateTo("/login");
		}

		await GetRoadmapById(new Guid(RoadmapId!));

		if (RoadmapId == Guid.Empty.ToString())
		{
			navManager.NavigateTo("/");
		}

		await LoadPageData();
	}

	private async Task GetRoadmapById(Guid roadmapId)
	{
		Roadmap = await roadmapService.GetRoadmapById(roadmapId);
	}

	private async Task GetLoggedInUserModel()
	{
		LoggedInUserModel = await userService.GetUserById(LoggedInUserId);
	}

	private async Task LoadPageData()
	{
		await GetLoggedInUserModel();
		await GetAllComentarios();
		await GetAllNodes();
		await UpdateRoadmapVoteButton();
		await UpdateComentarioVoteButton();
	}

	private async Task<string> GetButtonColorDetails(Guid roadmapId, Guid? loggedInUserId)
	{
		var roadmapVotes = await roadmapVotesService.GetAllRoadmapVotes();

		var votedRoadmapId = roadmapVotes!
			.Where(x => x.UserId == loggedInUserId && x.RoadmapId == roadmapId)
			.Select(x => x.Id).FirstOrDefault();

		if (votedRoadmapId == Guid.Empty)
		{
			return "vote-button-details";

		}
		else
		{
			return "vote-button-voted-details";
		}
	}

	private async Task GetAllComentarios()
	{
		var comentarios = await comentarioService.GetAllComentarios();
		var roadmapComentarios = comentarios.Where(x => x.RoadmapId.ToString() == RoadmapId).ToList();

		Comentarios = roadmapComentarios.OrderByDescending(x => x.CreatedDate).ToList();

		var users = await userService.GetAllUsers();

		foreach (var comentario in Comentarios)
		{
			foreach (var user in users)
			{
				if (user.Id == comentario.UserId)
				{
					comentario.Author = user.Username;
					comentario.AuthorId = user.Id;
				}
			}
		}
	}

	private async Task CommentOnRoadmap()
	{
		Comentario!.RoadmapId = new Guid(RoadmapId!);
		Comentario.UserId = LoggedInUserId;
		await comentarioService.CreateComentario(Comentario);

		await GetAllComentarios();
		await UpdateComentarioVoteButton();
	}

	private async Task DeleteComment(Guid comentarioId)
	{
		await comentarioService.DeleteComentario(comentarioId);

		var comentario = Comentarios!.FirstOrDefault(x => x.Id == comentarioId);

		if (comentario is not null)
		{
			Comentarios!.Remove(comentario);
		}
	}

	private async Task CreateNode()
	{
		Node.RoadmapId = new Guid(RoadmapId);
		await nodeService.CreateNode(Node);

		await GetAllNodes();
	}

	private async Task GetAllNodes()
	{
		var nodes = await nodeService.GetAllNodes(new Guid(RoadmapId));

		if (nodes is not null)
		{
			Nodes = nodes.OrderBy(x => x.CreatedDate).ToList();
		}
	}

	private async Task DeleteNode(Guid nodeId)
	{
		await nodeService.DeleteNode(nodeId);
		await GetAllNodes();
	}

	private async Task<bool> ToggleEditMode()
	{
		if (editMode is true)
		{
			editMode = false;

			return editMode;
		}

		editMode = true;

		return editMode;
	}

	private async Task AddUserVoteOnRoadmap(Guid roadmapId)
	{
		await roadmapVotingService.AddUserVote(roadmapId, LoggedInUserId);

		await UpdateComentarioVoteButton();
	}

	private async Task AddUserVoteOnComentario(Guid comentarioId)
	{
		await comentarioVotingService.AddUserVote(comentarioId, LoggedInUserId);

		await GetAllComentarios();
		await UpdateComentarioVoteButton();
	}

	private async Task UpdateComentarioVoteButton()
	{
		if (Comentarios is not null)
		{
			foreach (var comentario in Comentarios)
			{
				string comentarioClass = await comentarioVotingService.GetButtonColor(comentario.Id, LoggedInUserId);
				comentario.ComentarioHtmlClass = comentarioClass;

				int comentarioTotalVotes = await comentarioVotingService.GetComentarioVotes(comentario.Id);
				comentario.ComentarioTotalVotes = comentarioTotalVotes;
			}
		}
	}

	private async Task UpdateRoadmapVoteButton()
	{
		string roadmapClass = await roadmapVotingService.GetButtonColor(Roadmap.Id, LoggedInUserId);
		Roadmap.RoadmapHtmlClass = roadmapClass;

		int roadmapTotalVotes = await roadmapVotingService.GetRoadmapVotes(Roadmap.Id);
		Roadmap.RoadmapTotalVotes = roadmapTotalVotes;
	}

	private void SortComentariosByNew()
	{
		if (Comentarios is not null)
		{
			Comentarios = Comentarios.OrderByDescending(x => x.CreatedDate).ToList();
		}
	}

	private void SortComentariosByPopularity()
	{
		if (Comentarios is not null)
		{
			Comentarios = Comentarios.OrderByDescending(x => x.ComentarioTotalVotes).ToList();
		}
	}
}
