@page "/roadmapdetails/{roadmapid}"
@inject IRoadmapService roadmapService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapVotesService roadmapVotesService

@if (isInitialized)
{
	@if (Roadmap is not null)
	{
		<div>
			<div class="roadmap-details-name-category-div">
				<div>
					@Roadmap.Name
				</div>

				<div>
					@Roadmap.Category
				</div>
			</div>
			<div class="roadmap-details-description-div">
				@Roadmap.Description
			</div>
		</div>

		<div>
			Parte onde vai ficar o roadmap nodes
		</div>

		<div class="roadmap-details-vote-button">
			<div onclick="toggleVoteButtonDetailsClass(this.querySelector('button'))">
				<button class="@Roadmap.RoadmapHtmlClass" id="roadmap-vote-button"
			@onclick="async () => await AddUserVote(Roadmap.Id)">
					<span id="vote-count">@Roadmap.RoadmapTotalVotes</span>
					<div class="vote-icon"><i class="fas fa-caret-up"></i></div>
					Vote
				</button>
			</div>
		</div>
	}
}


@code {
	[Parameter]
	public string? RoadmapId { get; set; }
	public RoadmapClassModel? Roadmap { get; set; }
	bool isInitialized = false;
	public string? LoggedInUserId { get; set; }
	public UserModel? User { get; set; }
	const string DefaultProfilePicture = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png";

	protected override async Task OnInitializedAsync()
	{
		await GetLoggedInUserId();

		if (LoggedInUserId is null)
		{
			navManager.NavigateTo("login");
		}

		await GetRoadmapById(new Guid(RoadmapId!));

		string roadmapClass = await GetButtonColor(Roadmap!.Id);
		Roadmap!.RoadmapHtmlClass = roadmapClass;

		int roadmapTotalVotes = await GetRoadmapVotes(Roadmap.Id);
		Roadmap.RoadmapTotalVotes = roadmapTotalVotes;


		isInitialized = true;
	}

	protected override async Task OnParametersSetAsync()
	{
		await GetLoggedInUserId();

		string roadmapClass = await GetButtonColor(Roadmap!.Id);
		Roadmap!.RoadmapHtmlClass = roadmapClass;

		int roadmapTotalVotes = await GetRoadmapVotes(Roadmap.Id);
		Roadmap.RoadmapTotalVotes = roadmapTotalVotes;
	}

	private async Task GetRoadmapById(Guid roadmapId)
	{
		Roadmap = await roadmapService.GetRoadmapById(roadmapId);
	}

	private async Task GetLoggedInUserId()
	{
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		LoggedInUserId = userId;
	}

	private async Task AddUserVote(Guid roadmapId)
	{
		if (LoggedInUserId is not null)
		{
			RoadmapVotesModel roadmapVote = new();
			roadmapVote.UserId = new Guid(LoggedInUserId);
			roadmapVote.RoadmapId = new Guid(roadmapId.ToString());

			var didUserVotedOnRoadmap = await VerifiyIfUserVotedOnRoadmap(roadmapId);

			if (didUserVotedOnRoadmap is true)
			{
				var votedRoadmapId = await GetRoadmapVoteIdByUserAndRoadmapId(roadmapVote.RoadmapId);
				await roadmapVotesService.RemoveRoadmapVote(votedRoadmapId);
			}
			else
			{
				await roadmapVotesService.AddRoadmapVote(roadmapVote);
			}
		}
		else
		{
			navManager.NavigateTo("/login");
		}
	}

	private async Task<IList<RoadmapVotesModel>> GetAllRoadmapsUserVoted(Guid id)
	{
		var roadmaps = await roadmapVotesService.GetAllRoadmapsUserVoted(id);

		return roadmaps;
	}



	private async Task<bool> VerifiyIfUserVotedOnRoadmap(Guid roadmapId)
	{
		if (LoggedInUserId is not null)
		{
			var roadmaps = await GetAllRoadmapsUserVoted(new Guid(LoggedInUserId));

			foreach (var roadmap in roadmaps)
			{
				if (roadmap.RoadmapId == roadmapId)
				{
					return true;
				}
			}

			return false;
		}
		else
		{
			return false;
		}
	}

	private async Task<Guid> GetRoadmapVoteIdByUserAndRoadmapId(Guid roadmapId)
	{
		if (LoggedInUserId is not null)
		{
			var userId = new Guid(LoggedInUserId);

			var roadmapVote = await roadmapVotesService.GetRoadmapVoteIdByUserAndRoadmapId(userId, roadmapId);
			var voteId = roadmapVote.Id;

			return voteId;
		}
		else
		{
			return Guid.Empty;
		}
	}

	private async Task<string> GetButtonColor(Guid roadmapId)
	{
		var result = await VerifiyIfUserVotedOnRoadmap(roadmapId);

		if (result is true)
		{
			return "vote-button-voted-details";
		}

		return "vote-button-details";
	}

	private async Task<int> GetRoadmapVotes(Guid roadmapId)
	{
		var roadmapVotes = await roadmapVotesService.GetRoadmapVotesByRoadmapId(roadmapId);

		return roadmapVotes.Count();
	}
}
