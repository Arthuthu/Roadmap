@inject NavigationManager navManager
@inject IUserService userService
@inject IRoadmapService roadmapService
@inject IRoadmapVotingService votingService

@if (isInitialized)
{
    <div class="text-center">
        <div class="delete-roadmap-confirmation-label-div">
            <p>Tem certeza que deseja deletar esse roadmap?</p>
        </div>
        <div class="text-center">
            <button class="first-style-button"
                @onclick="async () => await DeleteRoadmap(new Guid(RoadmapId!))">
                Sim
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? RoadmapId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private UserModel? LoggedInUserModel { get; set; }
    private RoadmapClassModel? Roadmap { get; set; }
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await PageVerification();
    }

    private async Task PageVerification()
    {
        LoggedInUserId = await userService.GetLoggedInUserId();

        if (LoggedInUserId == Guid.Empty)
        {
            navManager.NavigateTo("/notfound");

            return;
        }

        if (RoadmapId is null)
        {
            navManager.NavigateTo("/notfound");

            return;
        }

        if (new Guid(RoadmapId!) == Guid.Empty)
        {
            navManager.NavigateTo("/notfound");

            return;
        }

        Roadmap = await roadmapService.GetRoadmapById(new Guid(RoadmapId!));

        if (Roadmap is null)
        {
            navManager.NavigateTo("/notfound");

            return;
        }

        LoggedInUserModel = await userService.GetUserById(LoggedInUserId);

        if (LoggedInUserModel is null)
        {
            navManager.NavigateTo("/notfound");

            return;
        }

        if (LoggedInUserModel!.IsAdmin is false)
        {
            navManager.NavigateTo("/notfound");

            return;
        }

        isInitialized = true;

        return;
    }

    private async Task DeleteRoadmap(Guid roadmapId)
    {
        var deleteResponse = await roadmapService.DeleteRoadmap(roadmapId);

        navManager.NavigateTo($"/profile/{LoggedInUserModel!.Username}");
    }
}
